---
title: "Data Pre-processing & Methodology"
date: 2025-06-20
date-modified: "last-modified"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1 Overview

There are three challenges from [VAST 2025](https://vast-challenge.github.io/2025/index.html) which features a fictitious island nation, Oceanus, famous for fishing and quiet seaside communities. Our group has chosen [Mini-Challenge 1](https://vast-challenge.github.io/2025/MC1.html).

## 1.1 Background

One of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.

In 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.

Sailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.

Sailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.

Additionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.

Now, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence.

## 1.2 Project Objective

The project aims to explore three key focus areas to better understand (a) understand the profile of Sailor Shift’s career, (b) examine the spread and evolution of Oceanus Folk and (c) develop a profile of a rising star in the music industry. Further details are found in [Overview](https://isss608-vaaproject.netlify.app/project/proposal).

## 1.3 Data Source

The data for this exercise is from [VAST 2025 MC1](https://github.com/vast-challenge/2025-data/blob/main/MC1_release.zip).

## 1.4 Data Description

**Graph Description**

-   Directed Multigraph
-   Number of nodes: 17,412
-   Number of edges: 37,857
-   18 connected components
-   Node types are: {Person, Song, RecordLabel, Album, MusicalGroup}
-   Edge types are: {MemberOf, PerformerOf, ComposerOf, ProducerOf, LyricistOf, InStyleOf, InterpolatesFrom, CoverOf, LyricalReferenceTo, DirectlySamples, RecordedBy, DistributedBy}
-   The graph format is a JSON file. The root-level JSON object consists of graph-level properties specifying that it is directed and a multigraph, a “nodes” key which holds the list of nodes, and a “links” key which holds the list of edges.

The data for this challenge comes from two different sources:

-   an online, crowdsourced repository of musical influence, where contributors have manually notated instances in which songs or albums have sampled, covered, or otherwise drawn inspiration from previous work.
-   aggregate-level descriptions of song popularity, as labeled by our journalist, Silas Reed. These notations (notable and notoriety_date) are directly based on both the number of sales and streams that the song/album has achieved as well as the whether or not the work landed on a top record chart.

## 1.5 Install and Load the Required Libraries

The following libraries are used in this exercise and the code below loads them into the working environment.

Utility Tools

-   jsonlite: To parse JSON
-   tidyverse - Data science tools
-   ggtext - Tools for text formatting
-   knitr - For better table displays
-   lubridate - For processing date and time
-   kableExtra - For tabular properties

Graphing Tools

-   patchwork - For combining ggplot plots
-   ggraph - For plotting network data
-   tidygraph - For graph manipulations
-   igraph - Contains functions for network analysis
-   ggiraph - Interactive plots
-   plotly - Professional visualisations
-   fsmb - For radar chart
-   glue - For dynamically inserting variables into titles
-   broom - For linear regression

```{r}
#| code-fold: true
#| code-summary: "Show Code"
pacman::p_load(jsonlite, tidyverse, ggtext,
                knitr, lubridate, patchwork,
                ggraph, tidygraph, igraph,
                ggiraph, kableExtra, plotly,
                fmsb, glue, broom)
```

## 1.6 Importing Data

For the purpose of this exercise, a data file called *MC1_graph* will be used. The code below imports *MC1_graph.json* into R environment by using *fromJSON()* function of *jsonlite* package.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_data <- fromJSON("data/MC1_graph.json")
glimpse(mc1_data)
```

# 2 Data Pre-Processing

## 2.1 Split into Nodes and Edges

The *mc1_data.json* data file provided by VAST 2025 for Mini-Challenge 1 consists of both nodes and links. The following codes will be used to split them into individual files for easier data matriculation.

### 2.1.1 Get Nodes

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw <- as_tibble(mc1_data$nodes)
```

The first 5 rows of *mc1_nodes_raw* are shown below.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
kable(head(mc1_nodes_raw, 5))
```

### 2.1.2 Get Edges

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_raw <- as_tibble(mc1_data$links)
```

The first 5 rows of *mc1_edges_raw* are shown below.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
kable(head(mc1_edges_raw, 5))
```

## 2.2 Data Overview

Before proceeding to data pre-processing, we examine the data to gain a clearer understanding of the dataset and to verify the structural integrity of the imported graph.

In this code chunk below, ggplot2 functions are used the reveal the frequency distribution of *Node Type* field of *mc1_nodes_raw* and *Edge Type* field of *mc1_edges_raw*.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Plot 1: Node Types
p1 <- ggplot(
  mc1_nodes_raw,
  aes(y = fct_infreq(`Node Type`), fill = `Node Type`)
) +
  geom_bar() +
  scale_fill_brewer(palette = "Set3") +
  labs(title = "Node Types", x = "Count", y = "Node Type") +
  theme_minimal() +
  theme(legend.position = "none")

# Plot 2: Edge Types
p2 <- ggplot(
  mc1_edges_raw,
  aes(y = fct_infreq(`Edge Type`), fill = `Edge Type`)
) +
  geom_bar() +
  scale_fill_brewer(palette = "Set3") +
  labs(title = "Edge Types", x = "Count", y = "Edge Type") +
  theme_minimal() +
  theme(legend.position = "none")

# Combine side by side
p1 + p2
```

## 2.3 Adding Identifying Columns

There are 2 columns that provides information on names, the *name* and *stage_name* column. The code below shows that the *name* column is the one that contains information on our target of interest Sailor Shift.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
kable(mc1_nodes_raw %>%
  filter(grepl("Sailor Shift", name))) #Sailor Shift is in name column and not in stage_name column

kable(mc1_nodes_raw %>%
  filter(grepl("Ivy Echos", name))) #Ivy Echos is also in name column and not in stage_name column
```

Identifying columns for Sailor Shift, Ivy Echos and Oceanus Folk are added to aid in the identification and filtering of these key variables for further analysis.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw <- mc1_nodes_raw %>%
  mutate(
    is_sailor = (
      str_detect(name, regex("sailor shift", ignore_case = TRUE))
    ) %>% replace_na(FALSE),
    is_ivy = (
      str_detect(name, regex("ivy echos", ignore_case = TRUE))
    ) %>% replace_na(FALSE),
    is_oceanus_folk = str_detect(genre, regex("oceanus folk", ignore_case = TRUE)) %>% #na/not oceanus folk = false
      replace_na(FALSE)
  )

kable(head(mc1_nodes_raw,5))
```

## 2.4 Convert Date Fields

The columns related to date are in *char* format and will be converted to *int* using the code below.

Note: Dates only appears in Songs and Albums.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw <- mc1_nodes_raw %>%
  mutate(across(c(release_date, notoriety_date, written_date),
                ~as.integer(if_else(`Node Type` %in% c("Song", "Album"), ., NA_character_))))
```

## 2.5 Check and Fix Duplicates

### 2.5.1 Duplicates in Nodes

For Nodes, there are no duplicated *id*.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw %>%
  count(id) %>%
  filter(n > 1)
```

The following code chunk shows records with duplicated names in *mc1_nodes_raw*.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
duplicated_name <- mc1_nodes_raw %>%
  count(name) %>%
  filter(n > 1)

kable(head(duplicated_name,5))
```

There are a total of 4,953 records:
```{r}
#| code-fold: true
#| code-summary: "Show Code"
cat("Total number of duplicated name:", sum(duplicated_name$n), "\n")
```

The table below shows some of the duplicated *name*.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw %>%
  filter(name %in% duplicated_name$name) %>%
  arrange(name) %>%
  kable() %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "200px")
```


The following code chunk will tag each row with a unique key (*group_key*) based on its respective column values. This helps to identify unique records.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_tagged <- mc1_nodes_raw %>%
  mutate(group_key = paste(`Node Type`, name, single, release_date, genre,
                           notable, written_date, notoriety_date, is_sailor,
                           is_oceanus_folk, sep = "|"))

kable(head(mc1_nodes_tagged,5))
```

The code below deduplicates the dataset using *group_key*, reducing the number of duplicated names from 4,953 to 14. The remaining 14 names appear more than once because their corresponding records differ in at least one column used to form *group_key*, so they are retained as distinct entries.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 2: De-duplicate and keep the preferred (with stage_name if available)
mc1_nodes_dedup <- mc1_nodes_tagged %>%
  group_by(group_key) %>%
  arrange(desc(!is.na(stage_name))) %>%
  slice(1) %>%
  ungroup()

duplicated_name <- mc1_nodes_dedup %>%
  count(name) %>%
  filter(n > 1)

mc1_nodes_dedup %>%
  filter(name %in% duplicated_name$name) %>%
  arrange(name) %>%
  kable() %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "200px")
```

### 2.5.2 Duplicates in Edges

For Edges, there are duplicates but only their *key* are different. Since, information on *key* is not provided by [VAST 2025 MC1](https://github.com/vast-challenge/2025-data/blob/main/MC1_release.zip), its purpose cannot be determined. Therefore, the *key* column will be redundant and duplicated edges differing only by their *key* will be removed.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 1: Identify duplicate combinations
duplicate_summary <- mc1_edges_raw %>%
  count(source, target, `Edge Type`) %>%
  filter(n > 1)

# Step 2: Join back to get all original duplicate rows
mc1_edges_raw %>%
  inner_join(duplicate_summary, by = c("source", "target", "Edge Type")) %>%
  kable()
```

All duplicates are removed using the code below and a check was performed to show that no duplicated edges remains.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_raw <- mc1_edges_raw %>%
  distinct(source, target, `Edge Type`, .keep_all = TRUE) %>%
  select(!key)

mc1_edges_raw %>%
  count(source, target, `Edge Type`) %>%
  filter(n > 1)
```

## 2.6 Check Nodes and Edges range

The *source* and *target* columns seems to refer to the *id* column in nodes. The code below is used to confirm this assumption since they have the same range:

```{r}
#| code-fold: true
#| code-summary: "Show Code"
range(mc1_nodes_dedup$id)

range(mc1_edges_raw$source)

range(mc1_edges_raw$target)
```

## 2.7 Mapping Node name to Edges id

tidygraph uses *from* and *to* columns to reference nodes. By default, tidygraph matches these edges reference against the first column in the nodes table, or against *name* column.

Currently, *source* and *target* columns in *mc1_edges_raw* contain *id* values that correspond to the *id* column in *mc1_nodes_clean*. To properly integrate with tidygraph's conventions, the following will be done:

1.  Restructure *mc1_nodes_clean*
    a.  Rename the current *name* column to *node_name* - this is done to preserve the actual node names
    b.  Rename the *id* column to *name* so it becomes the primary identifier column that tidygraph will use for matching
2.  Rename *source* and *target* columns in *mc1_edges_raw*, as required by tidygraph
3.  Ensure data type consistency: Convert the *name* column (formerly *id*) to character format to match the data type of the edge references

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_clean <- mc1_nodes_dedup %>%
  rename(node_name = name, name = id) %>%
  mutate(name = as.character(name)) %>%
  select(`Node Type`, node_name, release_date, genre, notable, name, single, written_date, stage_name, notoriety_date, is_sailor, is_ivy, is_oceanus_folk)

kable(head(mc1_nodes_clean,5))
```

### 2.7.1 Create Edge Mapping from original id to kept id

In section 3.3.2, duplicated nodes were deduplicated and removed, edges referring to the removed nodes will become invalid thus, edges will be remapped to the retained nodes. This step ensures that all edges correctly point to existing nodes in the deduplicated graph.

The code below maps the *original_id* to the *kept_id* in preparation for the next step.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 1: Create mapping of all group_key → kept id
key_to_id_map <- mc1_nodes_dedup %>%
  select(group_key, kept_id = id)

# Step 2: Map all original rows to the retained ID
id_remap <- mc1_nodes_tagged %>%
  left_join(key_to_id_map, by = "group_key") %>%
  select(original_id = id, kept_id)

kable(head(id_remap,5))
```


This step adds the *kept_id* column to the edge data.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 3: Replace edges' source and target with mapped kept_id
mc1_edges_mapped <- mc1_edges_raw %>%
  left_join(id_remap, by = c("source" = "original_id"))

kable(head(mc1_edges_mapped,5))
```

Next, the *source* is replaced by the *kept_id*. This is also repeated for *target*.

Lastly, the *source* and *target* columns are then renamed *from* and *to* respectively to follow tidygraph syntax.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_mapped <- mc1_edges_mapped %>%
  mutate(source = kept_id) %>%
  select(-kept_id) %>%
  left_join(id_remap, by = c("target" = "original_id")) %>%
  mutate(target = kept_id) %>%
  select(-kept_id) %>%
  rename(from = source, to = target) %>%
  mutate(from = as.character(from), to = as.character(to))

kable(head(mc1_edges_mapped,5))
```

## 2.8 Remove unmatched (invalid) edges

The following code chunk removes edges that reference missing node id, ensuring that only valid edges are kept.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_clean <- mc1_edges_mapped %>%
  filter(!is.na(from), !is.na(to))
```

There are no unmatched edges.

## 2.9 Check for any missing nodes

This steps looks for any unmatched nodes and edges and the result shows that all nodes have matching edges and vice versa.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
setdiff(
  unique(c(mc1_edges_clean$from, mc1_edges_clean$to)),
  mc1_nodes_clean$name
)
```

## 2.10 Checking Edges Schema

This section aims to ensure that each edge in the graph adheres to the schema specified in the VAST Challenge 2025 MC1 Data Description document. The following code checks whether the node types connect by each edge matches the valid source and target types for that edge's type.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Define valid source and destination types for each edge type
edge_rules <- list(
  PerformerOf = list(source = c("Person", "MusicalGroup"), target = c("Song", "Album")),
  ComposerOf = list(source = c("Person"), target = c("Song", "Album")),
  ProducerOf = list(source = c("Person", "RecordLabel"), target = c("Song", "Album", "Person", "MusicalGroup")),
  LyricistOf = list(source = c("Person"), target = c("Song", "Album")),
  RecordedBy = list(source = c("Song", "Album"), target = c("RecordLabel")),
  DistributedBy = list(source = c("Song", "Album"), target = c("RecordLabel")),
  InStyleOf = list(source = c("Song", "Album"), target = c("Song", "Album", "Person", "MusicalGroup")),
  InterpolatesFrom = list(source = c("Song", "Album"), target = c("Song", "Album")),
  CoverOf = list(source = c("Song", "Album"), target = c("Song", "Album")),
  LyricalReferenceTo = list(source = c("Song", "Album"), target = c("Song", "Album")),
  DirectlySamples = list(source = c("Song", "Album"), target = c("Song", "Album")),
  MemberOf = list(source = c("Person"), target = c("MusicalGroup"))
)
```

Using the rules defined above, the code below checks for erroneous edge and node relationships and shows that there are multiple invalid edges.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Create a lookup for node types
node_type_lookup <- mc1_nodes_clean %>%
  select(name, `Node Type`) %>%
  deframe()

# Add source and target node types to the edge table
mc1_edges_checked <- mc1_edges_clean %>%
  mutate(
    source_type = node_type_lookup[from],
    target_type = node_type_lookup[to]
  )

mc1_edges_tagged <- mc1_edges_checked %>%
  rowwise() %>%
  mutate(
    valid = {
      rule <- edge_rules[[`Edge Type`]]
      if (is.null(rule)) TRUE
      else {
        source_type %in% rule$source && target_type %in% rule$target
      }
    }
  ) %>%
  ungroup()

# Count and display invalid edge combinations
invalid_edge_summary <- mc1_edges_tagged %>%
  filter(!valid) %>%
  count(`Edge Type`, source_type, target_type, sort = TRUE)

kable(head(invalid_edge_summary,5))
```

In total, there are 550 invalid edges.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Check total invalid edge count
cat("Total invalid edges:", sum(!mc1_edges_tagged$valid), "\n")
```

Finally, the invalid edges are removed.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Keep only valid edges
mc1_edges_clean <- mc1_edges_tagged %>%
  filter(valid) 

cat("Total invalid edges:", sum(!mc1_edges_clean$valid), "\n")

mc1_edges_clean <- mc1_edges_clean %>%
  select(from, to, `Edge Type`)  # drop helper columns
```

## 2.11 Temporal Validation

The following code chunk is used to ensure any influenced songs/albums are not released before the songs/albums that influenced them. If there are any of such cases, it will be flagged out.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Define which edge types represent influence relationships between songs/albums
influence_edge_types <- c("InStyleOf", "InterpolatesFrom", "CoverOf", 
                         "LyricalReferenceTo", "DirectlySamples")

# Check for temporal inconsistencies in song/album influence relationships
temporal_check <- mc1_edges_clean %>%
  # Focus only on influence edge types
  filter(`Edge Type` %in% influence_edge_types) %>%
  # Add source node info (the influenced song/album)
  left_join(mc1_nodes_clean %>% 
            select(name, source_type = `Node Type`, source_release = release_date), 
            by = c("from" = "name")) %>%
  # Add target node info (the influencer song/album)
  left_join(mc1_nodes_clean %>% 
            select(name, target_type = `Node Type`, target_release = release_date), 
            by = c("to" = "name")) %>%
  # Only check Song/Album -> Song/Album relationships
  filter(source_type %in% c("Song", "Album"),
         target_type %in% c("Song", "Album")) %>%
  # Check for temporal violations
  mutate(
    temporal_violation = case_when(
      is.na(source_release) | is.na(target_release) ~ FALSE,  # Skip if dates missing
      source_release < target_release ~ TRUE,  # Influenced before influencer
      TRUE ~ FALSE
    )
  )

# Summary of temporal violations
violation_summary <- temporal_check %>%
  filter(temporal_violation) %>%
  count(`Edge Type`, sort = TRUE)

kable(head(violation_summary))
```

These are the invalid cases where the target works (e.g. songs) influencing the source works were released after the source works:

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Show examples of violations with node names
violation_examples <- temporal_check %>%
  filter(temporal_violation) %>%
  left_join(mc1_nodes_clean %>% select(name, source_name = node_name), 
            by = c("from" = "name")) %>%
  left_join(mc1_nodes_clean %>% select(name, target_name = node_name), 
            by = c("to" = "name")) %>%
  select(source_name, target_name, `Edge Type`, source_release, target_release) %>%
  arrange(source_release)
  

kable(head(violation_examples,5))
```

A check was done on the influenced works and their release dates:

```{r}
#| code-fold: true
#| code-summary: "Show Code"
total_violations <- sum(temporal_check$temporal_violation, na.rm = TRUE)
total_checked <- nrow(temporal_check)
cat("\nTotal song/album influence relationships checked:", total_checked, "\n")
cat("Total temporal violations found:", total_violations, "\n")
```

### 2.11.1 Removing all edges that have temporal issues

The following code chunk will remove all edges which was highlighted in Section 3.8 that has violated the temporal influence.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Get all edges that are not influence relationships (keep as-is)
non_influence_edges <- mc1_edges_clean %>%
  filter(!(`Edge Type` %in% influence_edge_types))

# Get temporally consistent influence edges
consistent_influence_edges <- temporal_check %>%
  filter(!temporal_violation) %>%
  select(from, to, `Edge Type`)

# Combine all valid edges
mc1_edges_clean <- bind_rows(non_influence_edges, consistent_influence_edges)

```

```{r}
#| code-fold: true
#| code-summary: "Show Code"
total_cleaned_influences <- consistent_influence_edges %>% nrow()
cat("Total song/album influence relationships after cleaning:", total_cleaned_influences, "\n")
```

## 2.12 Check for orphan nodes

There are no orphan nodes:
```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Get all node IDs that appear in edges (either as source or target)
nodes_with_edges <- unique(c(mc1_edges_clean$from, mc1_edges_clean$to))

# Find nodes that don't appear in any edges
orphan_nodes <- mc1_nodes_clean %>%
  filter(!name %in% nodes_with_edges)

# Summary of orphan nodes
cat("Total nodes:", nrow(mc1_nodes_clean), "\n")
cat("Nodes with edges:", length(nodes_with_edges), "\n")
cat("Orphan nodes (no edges):", nrow(orphan_nodes), "\n")
```

## 2.13 Creating Consistent Visualisation Colouring

The code below groups different types of edges and nodes into broader categories for consistent visualisation colouring.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_clean <- mc1_edges_clean %>%
  mutate(`Edge Colour` = case_when(
    `Edge Type` %in% c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf", "RecordedBy", "DistributedBy") ~ "Creator Of",
    `Edge Type` %in% c("InStyleOf", "InterpolatesFrom", "CoverOf", "LyricalReferenceTo", "DirectlySamples") ~ "Influenced By",
    `Edge Type` == "MemberOf" ~ "Member Of",
    TRUE ~ "Other"
  ))

mc1_nodes_clean <- mc1_nodes_clean %>%
  mutate(
    `Node Colour` = case_when(
      `Node Type` %in% c("Person", "MusicalGroup", "RecordLabel") ~ "Musician",
      genre == "Oceanus Folk" ~ "Oceanus Folk",
      TRUE ~ "Other Genre"
    )
  )
```

## 2.14 Creating the Global Knowledge Graph

The code below uses `tbl_graph()` to create a tidygraph's graph object.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
graph = tbl_graph(edges = mc1_edges_clean,
                             nodes = mc1_nodes_clean,
                             directed = TRUE)
```

Since several of the ggraph layouts involve randomisation, this code sets the seed value to ensure reproducibility of all the plots.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
set.seed(1234)
```

The data pre-processing steps are completed and we will move on to the findings and analysis. 