---
title: "Methodology and Analysis"
date: 2025-06-20
date-modified: "last-modified"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1 Overview

This exercise will target to answer one of the three challenges from [VAST 2025](https://vast-challenge.github.io/2025/index.html) which features a fictitious island nation, Oceanus, famous for fishing and quiet seaside communities.

The chosen challenge is [Mini-Challenge 1](https://vast-challenge.github.io/2025/MC1.html).

## 1.1 Background

One of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.

In 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.

Sailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.

Sailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.

Additionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.

Now, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence.

## 1.2 Tasks and Questions

1.  Design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career

    -   Who has she been most influenced by over time?
    -   Who has she collaborated with and directly or indirectly influenced?
    -   How has she influenced collaborators of the broader Oceanus Folk community?

2.  Develop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.

    -   Was this influence intermittent or did it have a gradual rise?
    -   What genres and top artists have been most influenced by Oceanus Folk?
    -   On the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?

3.  Use your visualizations to develop a profile of what it means to be a rising star in the music industry.

    -   Visualize the careers of three artists. Compare and contrast their rise in popularity and influence.
    -   Using this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years.

## 1.3 Data Source

The data for this exercise is from [VAST 2025 MC1](https://github.com/vast-challenge/2025-data/blob/main/MC1_release.zip).

## 1.4 Data Description

**Graph Description**

-   Directed Multigraph
-   Number of nodes: 17,412
-   Number of edges: 37,857
-   18 connected components
-   Node types are: {Person, Song, RecordLabel, Album, MusicalGroup}
-   Edge types are: {MemberOf, PerformerOf, ComposerOf, ProducerOf, LyricistOf, InStyleOf, InterpolatesFrom, CoverOf, LyricalReferenceTo, DirectlySamples, RecordedBy, DistributedBy}
-   The graph format is a JSON file. The root-level JSON object consists of graph-level properties specifying that it is directed and a multigraph, a “nodes” key which holds the list of nodes, and a “links” key which holds the list of edges.

The data for this challenge comes from two different sources:

-   an online, crowdsourced repository of musical influence, where contributors have manually notated instances in which songs or albums have sampled, covered, or otherwise drawn inspiration from previous work.
-   aggregate-level descriptions of song popularity, as labeled by our journalist, Silas Reed. These notations (notable and notoriety_date) are directly based on both the number of sales and streams that the song/album has achieved as well as the whether or not the work landed on a top record chart.

## 1.5 Install and Load the Required Libraries

The following libraries are used in this exercise and the code below loads them into the working environment.

Utility Tools

-   jsonlite: To parse JSON
-   tidyverse - Data science tools
-   ggtext - Tools for text formatting
-   knitr - For better table displays
-   lubridate - For processing date and time
-   kableExtra - For tabular properties

Graphing Tools

-   patchwork - For combining ggplot plots
-   ggraph - For plotting network data
-   tidygraph - For graph manipulations
-   igraph - Contains functions for network analysis
-   ggiraph - Interactive plots
-   plotly - Professional visualisations

```{r}
#| code-fold: true
#| code-summary: "Show Code"
pacman::p_load(jsonlite, tidyverse, ggtext,
                knitr, lubridate, patchwork,
                ggraph, tidygraph, igraph,
                ggiraph, kableExtra, plotly)
```

```{r setup, include=FALSE}
library(ggiraph)
library(systemfonts)

# Register Arial Narrow font
systemfonts::register_font(
  name = "Arial Narrow",
  plain = "C:/Windows/Fonts/ARIALN.TTF"  
)
```

## 1.6 Importing Data

For the purpose of this exercise, a data file called *MC1_graph* will be used. The code below imports *MC1_graph.json* into R environment by using *fromJSON()* function of *jsonlite* package.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_data <- fromJSON("data/MC1_graph.json")
glimpse(mc1_data)
```

# 2 Data Pre-Processing

## 2.1 Split into Nodes and Edges

The *mc1_data.json* data file provided by VAST 2025 for Mini-Challenge 1 consists of both nodes and links. The following codes will be used to split them into individual files for easier data matriculation.

### 2.1.1 Get Nodes

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw <- as_tibble(mc1_data$nodes)
```

The first 5 rows of *mc1_nodes_raw* are shown below.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
kable(head(mc1_nodes_raw, 5))
```

### 2.1.2 Get Edges

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_raw <- as_tibble(mc1_data$links)
```

The first 5 rows of *mc1_edges_raw* are shown below.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
kable(head(mc1_edges_raw, 5))
```

## 2.2 Data Overview

Before proceeding to data pre-processing, we examine the data to gain a clearer understanding of the dataset and to verify the structural integrity of the imported graph.

In this code chunk below, ggplot2 functions are used the reveal the frequency distribution of *Node Type* field of *mc1_nodes_raw* and *Edge Type* field of *mc1_edges_raw*.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Plot 1: Node Types
p1 <- ggplot(
  mc1_nodes_raw,
  aes(y = fct_infreq(`Node Type`), fill = `Node Type`)
) +
  geom_bar() +
  scale_fill_brewer(palette = "Pastel1") +
  labs(title = "Node Types", x = "Count", y = "Node Type") +
  theme_minimal() +
  theme(legend.position = "none")

# Plot 2: Edge Types
p2 <- ggplot(
  mc1_edges_raw,
  aes(y = fct_infreq(`Edge Type`), fill = `Edge Type`)
) +
  geom_bar() +
  scale_fill_brewer(palette = "Set3") +
  labs(title = "Edge Types", x = "Count", y = "Edge Type") +
  theme_minimal() +
  theme(legend.position = "none")

# Combine side by side
p1 + p2
```

## 2.3 Adding Identifying Columns

There are 2 columns that provides information on names, the *name* and *stage_name* column. The code below shows that the *name* column is the one that contains information on our target of interest Sailor Shift.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
kable(mc1_nodes_raw %>%
  filter(grepl("Sailor Shift", name))) #Sailor Shift is in name column and not in stage_name column

kable(mc1_nodes_raw %>%
  filter(grepl("Ivy Echos", name))) #Ivy Echos is also in name column and not in stage_name column
```

Identifying columns for Sailor Shift, Ivy Echos and Oceanus Folk are added to aid in the identification and filtering of these key variables for further analysis.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw <- mc1_nodes_raw %>%
  mutate(
    is_sailor = (
      str_detect(name, regex("sailor shift", ignore_case = TRUE))
    ) %>% replace_na(FALSE),
    is_ivy = (
      str_detect(name, regex("ivy echos", ignore_case = TRUE))
    ) %>% replace_na(FALSE),
    is_oceanus_folk = str_detect(genre, regex("oceanus folk", ignore_case = TRUE)) %>% #na/not oceanus folk = false
      replace_na(FALSE)
  )

kable(head(mc1_nodes_raw,5))
```

## 2.4 Convert Date Fields

The columns related to date are in *char* format and will be converted to *int* using the code below.

Note: Dates only appears in Songs and Albums.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw <- mc1_nodes_raw %>%
  mutate(across(c(release_date, notoriety_date, written_date),
                ~as.integer(if_else(`Node Type` %in% c("Song", "Album"), ., NA_character_))))
```

## 2.5 Check and Fix Duplicates

### 2.5.1 Duplicates in Nodes

For Nodes, there are no duplicated *id*.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw %>%
  count(id) %>%
  filter(n > 1)
```

The following code chunk shows a total of 4,953 records with duplicated names in *mc1_nodes_raw*.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
duplicated_name <- mc1_nodes_raw %>%
  count(name) %>%
  filter(n > 1)

kable(head(duplicated_name,5))

cat("Total number of duplicated name:", sum(duplicated_name$n), "\n")
```

The table below shows some of the duplicated *name*.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_raw %>%
  filter(name %in% duplicated_name$name) %>%
  arrange(name) %>%
  kable() %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "200px")
```

The following code chunk will tag each row with a unique key (*group_key*) based on its respective column values. This helps to identify unique records.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_tagged <- mc1_nodes_raw %>%
  mutate(group_key = paste(`Node Type`, name, single, release_date, genre,
                           notable, written_date, notoriety_date, is_sailor,
                           is_oceanus_folk, sep = "|"))

kable(head(mc1_nodes_tagged,5))
```

The code below deduplicates the dataset using *group_key*, reducing the number of duplicated names from 4,953 to 14. The remaining 14 names appear more than once because their corresponding records differ in at least one column used to form *group_key*, so they are retained as distinct entries.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 2: De-duplicate and keep the preferred (with stage_name if available)
mc1_nodes_dedup <- mc1_nodes_tagged %>%
  group_by(group_key) %>%
  arrange(desc(!is.na(stage_name))) %>%
  slice(1) %>%
  ungroup()

duplicated_name <- mc1_nodes_dedup %>%
  count(name) %>%
  filter(n > 1)

mc1_nodes_dedup %>%
  filter(name %in% duplicated_name$name) %>%
  arrange(name) %>%
  kable() %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "200px")
```

### 2.5.2 Duplicates in Edges

For Edges, there are duplicates but only their *key* are different. Since, information on *key* is not provided by [VAST 2025 MC1](https://github.com/vast-challenge/2025-data/blob/main/MC1_release.zip), its purpose cannot be determined. Therefore, the *key* column will be redundant and duplicated edges differing only by their *key* will be removed.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 1: Identify duplicate combinations
duplicate_summary <- mc1_edges_raw %>%
  count(source, target, `Edge Type`) %>%
  filter(n > 1)

# Step 2: Join back to get all original duplicate rows
mc1_edges_raw %>%
  inner_join(duplicate_summary, by = c("source", "target", "Edge Type")) %>%
  kable()
```

All duplicates are removed using the code below and a check was performed to show that no duplicated edges remains.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_raw <- mc1_edges_raw %>%
  distinct(source, target, `Edge Type`, .keep_all = TRUE) %>%
  select(!key)

mc1_edges_raw %>%
  count(source, target, `Edge Type`) %>%
  filter(n > 1)
```

## 2.6 Check Nodes and Edges range

The *source* and *target* columns seems to refer to the *id* column in nodes. The code below is used to confirm this assumption since they have the same range.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
range(mc1_nodes_dedup$id)

range(mc1_edges_raw$source)

range(mc1_edges_raw$target)
```

## 2.7 Mapping Node name to Edges id

tidygraph uses *from* and *to* columns to reference nodes. By default, tidygraph matches these edges reference against the first column in the nodes table, or against *name* column.

Currently, *source* and *target* columns in *mc1_edges_raw* contain *id* values that correspond to the *id* column in *mc1_nodes_clean*. To properly integrate with tidygraph's conventions, the following will be done:

1.  Restructure *mc1_nodes_clean*
    a.  Rename the current *name* column to *node_name* - this is done to preserve the actual node names
    b.  Rename the *id* column to *name* so it becomes the primary identifier column that tidygraph will use for matching
2.  Rename *source* and *target* columns in *mc1_edges_raw*, as required by tidygraph
3.  Ensure data type consistency: Convert the *name* column (formerly *id*) to character format to match the data type of the edge references

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_nodes_clean <- mc1_nodes_dedup %>%
  rename(node_name = name, name = id) %>%
  mutate(name = as.character(name)) %>%
  select(`Node Type`, node_name, release_date, genre, notable, name, single, written_date, stage_name, notoriety_date, is_sailor, is_ivy, is_oceanus_folk)

kable(head(mc1_nodes_clean,5))
```

### 2.7.1 Create Edge Mapping from original id to kept id

In section 3.3.2, duplicated nodes were deduplicated and removed, edges referring to the removed nodes will become invalid thus, edges will be remapped to the retained nodes. This step ensures that all edges correctly point to existing nodes in the deduplicated graph.

The code below maps the *original_id* to the *kept_id* in preparation for the next step.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 1: Create mapping of all group_key → kept id
key_to_id_map <- mc1_nodes_dedup %>%
  select(group_key, kept_id = id)

# Step 2: Map all original rows to the retained ID
id_remap <- mc1_nodes_tagged %>%
  left_join(key_to_id_map, by = "group_key") %>%
  select(original_id = id, kept_id)

kable(head(id_remap,5))
```

This step adds the *kept_id* column to the edge data.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 3: Replace edges' source and target with mapped kept_id
mc1_edges_mapped <- mc1_edges_raw %>%
  left_join(id_remap, by = c("source" = "original_id"))

kable(head(mc1_edges_mapped,5))
```

Next, the *source* is replaced by the *kept_id*. This is also repeated for *target*.

Lastly, the *source* and *target* columns are then renamed *from* and *to* respectively to follow tidygraph syntax.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_mapped <- mc1_edges_mapped %>%
  mutate(source = kept_id) %>%
  select(-kept_id) %>%
  left_join(id_remap, by = c("target" = "original_id")) %>%
  mutate(target = kept_id) %>%
  select(-kept_id) %>%
  rename(from = source, to = target) %>%
  mutate(from = as.character(from), to = as.character(to))

kable(head(mc1_edges_mapped,5))
```

## 2.8 Remove unmatched (invalid) edges

The following code chunk removes edges that reference missing node id, ensuring that only valid edges are kept.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_clean <- mc1_edges_mapped %>%
  filter(!is.na(from), !is.na(to))
```

There are no unmatched edges.

## 2.9 Check for any missing nodes

This steps looks for any unmatched nodes and edges and the result shows that all nodes have matching edges and vice versa.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
setdiff(
  unique(c(mc1_edges_clean$from, mc1_edges_clean$to)),
  mc1_nodes_clean$name
)
```

## 2.10 Checking Edges Schema

This section aims to ensure that each edge in the graph adheres to the schema specified in the VAST Challenge 2025 MC1 Data Description document. The following code checks whether the node types connect by each edge matches the valid source and target types for that edge's type.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Define valid source and destination types for each edge type
edge_rules <- list(
  PerformerOf = list(source = c("Person", "MusicalGroup"), target = c("Song", "Album")),
  ComposerOf = list(source = c("Person"), target = c("Song", "Album")),
  ProducerOf = list(source = c("Person", "RecordLabel"), target = c("Song", "Album", "Person", "MusicalGroup")),
  LyricistOf = list(source = c("Person"), target = c("Song", "Album")),
  RecordedBy = list(source = c("Song", "Album"), target = c("RecordLabel")),
  DistributedBy = list(source = c("Song", "Album"), target = c("RecordLabel")),
  InStyleOf = list(source = c("Song", "Album"), target = c("Song", "Album", "Person", "MusicalGroup")),
  InterpolatesFrom = list(source = c("Song", "Album"), target = c("Song", "Album")),
  CoverOf = list(source = c("Song", "Album"), target = c("Song", "Album")),
  LyricalReferenceTo = list(source = c("Song", "Album"), target = c("Song", "Album")),
  DirectlySamples = list(source = c("Song", "Album"), target = c("Song", "Album")),
  MemberOf = list(source = c("Person"), target = c("MusicalGroup"))
)
```

Using the rules defined above, the code below checks for erroneous edge and node relationships and shows that there are multiple invalid edges.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Create a lookup for node types
node_type_lookup <- mc1_nodes_clean %>%
  select(name, `Node Type`) %>%
  deframe()

# Add source and target node types to the edge table
mc1_edges_checked <- mc1_edges_clean %>%
  mutate(
    source_type = node_type_lookup[from],
    target_type = node_type_lookup[to]
  )

mc1_edges_tagged <- mc1_edges_checked %>%
  rowwise() %>%
  mutate(
    valid = {
      rule <- edge_rules[[`Edge Type`]]
      if (is.null(rule)) TRUE
      else {
        source_type %in% rule$source && target_type %in% rule$target
      }
    }
  ) %>%
  ungroup()

# Count and display invalid edge combinations
invalid_edge_summary <- mc1_edges_tagged %>%
  filter(!valid) %>%
  count(`Edge Type`, source_type, target_type, sort = TRUE)

kable(head(invalid_edge_summary,5))
```

In total, there are 550 invalid edges.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Check total invalid edge count
cat("Total invalid edges:", sum(!mc1_edges_tagged$valid), "\n")
```

Finally, the invalid edges are removed.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Keep only valid edges
mc1_edges_clean <- mc1_edges_tagged %>%
  filter(valid) 

cat("Total invalid edges:", sum(!mc1_edges_clean$valid), "\n")

mc1_edges_clean <- mc1_edges_clean %>%
  select(from, to, `Edge Type`)  # drop helper columns
```

## 2.11 Temporal Validation

The following code chunk is used to ensure any influenced songs/albums are not released before the songs/albums that influenced them. If there are any of such cases, it will be flagged out.

```{r}

# Define which edge types represent influence relationships between songs/albums
influence_edge_types <- c("InStyleOf", "InterpolatesFrom", "CoverOf", 
                         "LyricalReferenceTo", "DirectlySamples")

# Check for temporal inconsistencies in song/album influence relationships
temporal_check <- mc1_edges_clean %>%
  # Focus only on influence edge types
  filter(`Edge Type` %in% influence_edge_types) %>%
  # Add source node info (the influenced song/album)
  left_join(mc1_nodes_clean %>% 
            select(name, source_type = `Node Type`, source_release = release_date), 
            by = c("from" = "name")) %>%
  # Add target node info (the influencer song/album)
  left_join(mc1_nodes_clean %>% 
            select(name, target_type = `Node Type`, target_release = release_date), 
            by = c("to" = "name")) %>%
  # Only check Song/Album -> Song/Album relationships
  filter(source_type %in% c("Song", "Album"),
         target_type %in% c("Song", "Album")) %>%
  # Check for temporal violations
  mutate(
    temporal_violation = case_when(
      is.na(source_release) | is.na(target_release) ~ FALSE,  # Skip if dates missing
      source_release < target_release ~ TRUE,  # Influenced before influencer
      TRUE ~ FALSE
    )
  )

# Summary of temporal violations
violation_summary <- temporal_check %>%
  filter(temporal_violation) %>%
  count(`Edge Type`, sort = TRUE)

kable(head(violation_summary))
```

These are the invalid cases where the target works (e.g. songs) influencing the source works were released after the source works.

```{r}
# Show examples of violations with node names
violation_examples <- temporal_check %>%
  filter(temporal_violation) %>%
  left_join(mc1_nodes_clean %>% select(name, source_name = node_name), 
            by = c("from" = "name")) %>%
  left_join(mc1_nodes_clean %>% select(name, target_name = node_name), 
            by = c("to" = "name")) %>%
  select(source_name, target_name, `Edge Type`, source_release, target_release) %>%
  arrange(source_release)
  

kable(head(violation_examples,5))
```

A check was done on the influenced works and their release dates.

```{r}
total_violations <- sum(temporal_check$temporal_violation, na.rm = TRUE)
total_checked <- nrow(temporal_check)
cat("\nTotal song/album influence relationships checked:", total_checked, "\n")
cat("Total temporal violations found:", total_violations, "\n")
```

#### 2.11.1 Removing all edges that have temporal issues

The following code chunk will remove all edges which was highlighted in Section 3.8 that has violated the temporal influence.

```{r}
# Get all edges that are not influence relationships (keep as-is)
non_influence_edges <- mc1_edges_clean %>%
  filter(!(`Edge Type` %in% influence_edge_types))

# Get temporally consistent influence edges
consistent_influence_edges <- temporal_check %>%
  filter(!temporal_violation) %>%
  select(from, to, `Edge Type`)

# Combine all valid edges
mc1_edges_clean <- bind_rows(non_influence_edges, consistent_influence_edges)

```

```{r}
total_cleaned_influences <- consistent_influence_edges %>% nrow()
cat("Total song/album influence relationships after cleaning:", total_cleaned_influences, "\n")
```

## 2.12 Check for orphan nodes

```{r}
# Get all node IDs that appear in edges (either as source or target)
nodes_with_edges <- unique(c(mc1_edges_clean$from, mc1_edges_clean$to))

# Find nodes that don't appear in any edges
orphan_nodes <- mc1_nodes_clean %>%
  filter(!name %in% nodes_with_edges)

# Summary of orphan nodes
cat("Total nodes:", nrow(mc1_nodes_clean), "\n")
cat("Nodes with edges:", length(nodes_with_edges), "\n")
cat("Orphan nodes (no edges):", nrow(orphan_nodes), "\n")
```

## 2.13 Creating Consistent Visualisation Colouring

The code below groups different types of edges and nodes into broader categories for consistent visualisation colouring.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
mc1_edges_clean <- mc1_edges_clean %>%
  mutate(`Edge Colour` = case_when(
    `Edge Type` %in% c("PerformerOf", "ComposerOf", "ProducerOf", "LyricistOf", "RecordedBy", "DistributedBy") ~ "Creator Of",
    `Edge Type` %in% c("InStyleOf", "InterpolatesFrom", "CoverOf", "LyricalReferenceTo", "DirectlySamples") ~ "Influenced By",
    `Edge Type` == "MemberOf" ~ "Member Of",
    TRUE ~ "Other"
  ))

mc1_nodes_clean <- mc1_nodes_clean %>%
  mutate(
    `Node Colour` = case_when(
      `Node Type` %in% c("Person", "MusicalGroup", "RecordLabel") ~ "Musician",
      genre == "Oceanus Folk" ~ "Oceanus Folk",
      TRUE ~ "Other Genre"
    )
  )
```

## 2.14 Creating the Global Knowledge Graph

The code below uses `tbl_graph()` to create a tidygraph's graph object.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
graph = tbl_graph(edges = mc1_edges_clean,
                             nodes = mc1_nodes_clean,
                             directed = TRUE)
```

Since several of the ggraph layouts involve randomisation, this code sets the seed value to ensure reproducibility of all the plots.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
set.seed(1234)
```

# 3 Exploratory Data Analysis (EDA) on Sailor Shift's career

We will design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career.

::: callout-warning
# Note

This analysis examines Sailor Shift's work during her solo artist career, excluding her initial collaborative period with Ivy Echos.

Future work: What if we make everything into a function and find members that the person is part of and use a while loop to get everything so it includes all groups that the person is a part of?
:::

## 3.1 Visualising Sailor Shift's Music

The analysis begins by extracting Sailor Shift's *name* from the node dataset. Following this, all outgoing edges originating from her node are identified. The resulting nodes from those edges are filtered to isolate only those classified as Songs and Albums, thereby displaying her musical career.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Step 0: Get name of 'Sailor Shift'
sailor_vertex_name <- mc1_nodes_clean %>%
  filter(is_sailor == TRUE) %>%
  pull(name)

# Step 1: Find outgoing edges from Sailor Shift
sailor_out_edges <- mc1_edges_clean %>%
  filter(from == sailor_vertex_name)

# Step 2: Identify neighbour node names
sailor_out_node_names <- sailor_out_edges$to

# Step 4: Identify songs/albums
sailor_music_all <- mc1_nodes_clean %>%
  filter(name %in% sailor_out_node_names, `Node Type` %in% c("Song", "Album")) %>%
  pull(name)

# Step 5: Build subgraph using names
sub_nodes <- unique(c(sailor_vertex_name, sailor_music_all))

sub_graph <- graph %>%
  activate(nodes) %>%
  filter(name %in% sub_nodes)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name %in% c("Sailor Shift", "Ivy Echos", "Wei Zhao"), 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == "Sailor Shift", "Sailor Shift",
              ifelse(node_name == "Ivy Echos", "Ivy Echos",
              ifelse(node_name == "Wei Zhao", "Wei Zhao", NA)))
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: callout-tip
## Sailor Shift's Music Insights

-   In total, Sailor Shift released 38 Songs and Albums from 2024 to 2040
-   Details on the Songs and Albums can be found in the table below
-   Sailor Shift released 4 Songs in 2028
    -   Among those, only 1 is a Single
    -   Therefore, the viral Song that spark her breakthrough is **High Tide Heartbeat**
-   Among her Songs and Albums, 36 belong to the Oceanus Folk genre, while there is 1 Americana and 1 Synthwave Album each.
:::

```{r}
#| code-fold: true
#| code-summary: "Show Code"

mc1_nodes_clean %>%
  filter(name %in% sailor_music_all) %>%
  arrange(release_date) %>%
  select(`Node Type`, node_name, release_date, genre, notable, single, notoriety_date) %>%
  kable() %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "300px")
```

## 4.2 Question 1a) Who has she been most influenced by over time?

This section is a continuation from the previous [section](https://isss608-ay2024-25t3.netlify.app/take-home_ex/take-home_ex02/take-home_ex02_mc1_main_v5#visualising-sailor-shifts-music) where all her outgoing edges were found. Music that she produced were already found and now Persons and Musical Groups that are outgoing from her are included. From these Songs, Albums, Persons and Musical Groups, only those Songs and Albums with further outgoing edges are kept. Then, the nodes connected to those are found. These are music that her music have been influenced by. Finally, the last step finds Person and Musical Groups who produced the music that have influenced her music.

Note: The term music refers to either Song or Album.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Get all creator names
global_creators <- mc1_nodes_clean %>%
  filter(`Node Type` %in% c("Person", "MusicalGroup"))

# Step 2: Get all outgoing edges from these creators
creator_out_edges <- mc1_edges_clean %>%
  filter(from %in% global_creators$name, `Edge Colour` == "Creator Of")

# Step 3: Get all songs made by creators
creator_music <- mc1_nodes_clean %>%
  filter(name %in% creator_out_edges$to)

# Step 4: Get all outgoing edges from songs
creator_songs_out_edges <- mc1_edges_clean %>%
  filter(from %in% creator_music$name, `Edge Colour` == "Influenced By")

# Step 5: First join to get creator names (from)
creators <- creator_out_edges %>%
  left_join(mc1_nodes_clean, by = c("from" = "name")) %>%
  select(from, to, node_name, `Node Type`) %>%
  rename(creator_from = from, creator_name = node_name, creator_node_type = `Node Type`)

# Step 6: Second join to get song names (to)
creator_and_songs <- creators %>%
  left_join(mc1_nodes_clean, by = c("to" = "name")) %>%
  select(creator_from, creator_name, creator_node_type, to, node_name, release_date, genre, notable) %>%
  rename(song_name = node_name, song_genre = genre, song_to = to) %>%
  distinct()

# Step 7: Third join to get song's influenced genre (to)
creator_and_songs_and_influenced_by <- creator_and_songs %>%
  left_join(creator_songs_out_edges %>% select(from, to), by = c("song_to" = "from"), relationship = "many-to-many") %>%
  left_join(mc1_nodes_clean %>% select(name, genre), by = c("to" = "name")) %>%
  rename(influenced_by_genre = genre, influenced_by = to) %>%
  distinct()

# Step 8: Fourth join to get influenced song's creator
creator_and_songs_and_influenced_by_creator <- creator_and_songs_and_influenced_by %>%
  left_join(creator_out_edges %>% select(from, to), by = c("influenced_by" = "to"), relationship = "many-to-many") %>%
  rename(influenced_by_creator = from)
```

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

chosen_creator_1 = "Sailor Shift"

# Step 1: Get the node of the chosen creator
chosen_node_1 <- creator_and_songs_and_influenced_by_creator %>%
  filter(creator_name == chosen_creator_1) %>%
  pull(creator_from) %>%
  unique()

# Step 2: Get the songs that the creator produced
creator_songs_1 <- creator_and_songs_and_influenced_by_creator %>%
  filter(creator_from == chosen_node_1,
         creator_from != influenced_by) %>%
  pull(song_to)

# Step 3: Get the songs they have influenced by
creators_songs_influenced_1 <- creator_and_songs_and_influenced_by_creator %>%
  filter(creator_from == chosen_node_1,
         creator_from != influenced_by) %>%
  pull(influenced_by)

# Step 5: Get the creators of the influenced by songs
creators_songs_influenced_creators_1 <- creator_and_songs_and_influenced_by_creator %>%
  filter(creator_from == chosen_node_1,
         creator_from != influenced_by) %>%
  pull(influenced_by_creator)

# Step 5: Combine all relevant node names
all_node_names <- unique(c(
  chosen_node_1,
  creator_songs_1,
  creators_songs_influenced_1,
  creators_songs_influenced_creators_1
))

# Step 6: Filter graph to relevant nodes only
sub_graph <- graph %>%
  filter(name %in% all_node_names)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name %in% c("Sailor Shift", "Ivy Echos", "Wei Zhao"), 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == "Sailor Shift", "Sailor Shift",
              ifelse(node_name == "Wei Zhao", "Wei Zhao", NA))
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: callout-tip
## Who has Sailor Shift been most influenced by over time?

-   The table below shows all the Person and Musical Group that have influenced Sailor Shift
-   Through the graph, most of the other Person and Musical Group have only produced a single music that has influenced one of her music.
-   However, Wei Zhao stands out because they have influenced Sailor Shift more than once.
    -   Wei Zhao is the producer of **Susurros de Passion** that has influenced the her album **Salty Dreams**. Wei Zhao is also the composer of **Silent Steps in the Forest's Embrance** that has influenced her song **Moon Over the Tide**.
-   In conclusion, Ivy Echos and Wei Zhao have been the most influential on Sailor Shift's music career.
:::

```{r}
#| code-fold: true
#| code-summary: "Show Code"
# Extract node data
node_data <- as_tibble(sub_graph)

# View all Person and Musical Group that has influenced Sailor Shift
node_data %>%
  filter(name != "Sailor Shift", `Node Type` %in% c("Person", "MusicalGroup")) %>%
  select(`Node Type`, node_name) %>%
  kable() %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "200px")
```

## 4.3 Question 1b) Who has she collaborated with and directly or indirectly influenced?

The analysis begins with the sailor_music_all dataset from [Section 4.1](https://isss608-ay2024-25t3.netlify.app/take-home_ex/take-home_ex02/take-home_ex02_mc1_main_v5#visualising-sailor-shifts-music), filtering to retain only music with more than two inward edges. This step eliminates works without collaborators or external influences. Two Song/Albums ("The Current & The Chord" and "Salty Dreams") have to be manually removed since their inward edges are from Sailor herself and therefore not needed. Next, all inward neighbours (source nodes) of Sailor's music are identified, representing both influenced works (Songs/Albums) and collaborators (Persons/Musical Groups). After filtering to keep only Songs and Albums, their inward neighbours are examined. This reveals: (1) Persons/Musical Groups who have been influenced by Sailor's music (Persons/Musical Groups), and (2) secondary influenced works (Songs/Albums) that were impacted by the same sources that were influenced by Sailor's compositions.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Get all creator names
global_creators <- mc1_nodes_clean %>%
  filter(`Node Type` %in% c("Person", "MusicalGroup"))

# Step 2: Get all outgoing edges from these creators
creator_out_edges <- mc1_edges_clean %>%
  filter(from %in% global_creators$name, `Edge Colour` == "Creator Of")

# Step 3: Get all songs made by creators
creator_music <- mc1_nodes_clean %>%
  filter(name %in% creator_out_edges$to)

# Step 4: Get all incoming edges from songs (music and collaborators)
creator_songs_in_edges <- mc1_edges_clean %>%
  filter(to %in% creator_music$name)

# Step 5: First join to get creator names (from)
creators <- creator_out_edges %>%
  left_join(mc1_nodes_clean, by = c("from" = "name")) %>%
  select(from, to, node_name, `Node Type`) %>%
  rename(creator_name = node_name, creator_node_type = `Node Type`)

# Step 6: Second join to get song names (to)
creator_and_songs <- creators %>%
  left_join(mc1_nodes_clean, by = c("to" = "name")) %>%
  select(from, creator_name, creator_node_type, to, node_name, release_date, genre, notable) %>%
  rename(creator_from = from, song_name = node_name, creator_release_date = release_date, song_genre = genre, song_to = to) %>%
  distinct()

# Step 7: Third join to get influenced songs / collaborators
creator_and_songs_and_influences <- creator_and_songs %>%
  left_join(creator_songs_in_edges %>% select(from, to, `Edge Colour`), by = c("song_to" = "to"), relationship = "many-to-many") %>%
  left_join(mc1_nodes_clean %>% select(name, genre, node_name, release_date), by = c("from" = "name")) %>%
  rename(influence_genre = genre, infuence_music_collaborate = from, infuence_music_collaborate_name = node_name, influence_release_date = release_date) %>%
  distinct()

# Step 8: Fourth join to get influenced song's creator
creator_and_songs_and_influences_and_creators <- creator_and_songs_and_influences %>%
  left_join(creator_out_edges %>% select(from, to), by = c("infuence_music_collaborate" = "to"), relationship = "many-to-many") %>%
  rename(influence_creator = from)

# Step 9: Fifth join to get influenced song's creator name
creator_and_songs_and_influences_and_creators <- creator_and_songs_and_influences_and_creators %>%
  left_join(mc1_nodes_clean %>% select(name, node_name), by = c("influence_creator" = "name")) %>%
  rename(influence_creator_name = node_name)

# Step 10: Add release date for collaborators
creator_and_songs_and_influences_and_creators_collaborate <- creator_and_songs_and_influences_and_creators %>%
  mutate(
    influence_release_date = case_when(
      `Edge Colour` == "Creator Of" ~ creator_release_date,
      TRUE ~ influence_release_date  # Keeps original value if not "Creator Of"
    ),
    influence_creator = case_when(   # A collaborator can also be considered influenced
      `Edge Colour` == "Creator Of" ~ infuence_music_collaborate,
      TRUE ~ influence_creator
    )
  )
```

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 2: Get the songs that the creator produced
creator_songs_1 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1,
         infuence_music_collaborate != chosen_node_1) %>%
  pull(song_to)

# Step 3: Get the songs they have influenced / artists they collaborate with
creators_songs_collaborate_influence_1 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1,
         infuence_music_collaborate != chosen_node_1) %>%
  pull(infuence_music_collaborate)

# Step 4: Get the songs they have influenced
creators_songs_influence_1 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1,
         infuence_music_collaborate != chosen_node_1,
         `Edge Colour` == "Influenced By") %>%
  pull(infuence_music_collaborate)

# Step 5: Get the influenced creators of the influenced songs
creators_songs_influence_creators_1 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1,
         influence_creator != chosen_node_1,
         !is.na(influence_creator),
         infuence_music_collaborate %in% creators_songs_influence_1) %>%
  pull(influence_creator)

all_nodes <- unique(c(chosen_node_1, 
                      creator_songs_1, 
                      creators_songs_collaborate_influence_1,
                      creators_songs_influence_creators_1))

# Create subgraph
sub_graph <- graph %>%
  filter(name %in% all_nodes)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name == chosen_creator_1, 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == chosen_creator_1, chosen_creator_1, NA)
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: callout-tip
## Who has she collaborated with and directly or indirectly influenced?

-   The graph and table shows everyone that she has collaborated with.
    -   Sailor Shift has collaborated with 48 different artists and information on them can be found in the table below.
-   However, Sailor Shift has not directly or indirectly influenced anyone, since none of her music has influenced others.
    -   For example, no Songs/Albums has referenced her Songs or Albums.
:::

```{r}
#| code-fold: true
#| code-summary: "Show Code"

collaboration_count <- mc1_nodes_clean %>%
  filter(name %in% all_nodes, 
         `Node Type` %in% c("Person", "MusicalGroup"),
         name != chosen_node_1) %>%
  distinct(name) %>%
  nrow()

# Print the formatted message
cat(paste0("Sailor Shift has collaborated with ", collaboration_count, 
           " different Persons and Musical Groups\n"))

mc1_nodes_clean %>%
  filter(name %in% all_nodes, 
         `Node Type` %in% c("Person", "MusicalGroup"),
         name != chosen_node_1) %>%
  arrange(release_date) %>%
  select(`Node Type`, node_name) %>%
  kable() %>%
  scroll_box(height = "200px")
```

## 4.4 Question 1c) How has she influenced collaborators of the broader Oceanus Folk community?

This question is tackled by first identifying all Songs and Albums belonging to the **Oceanus Folk** *Genre* and retriving their associated artists (Persons/Musical Groups). Then Sailor Shift's is identified and her degree of separation is calculated to examine her impact on the broader Oceanus Folk community.

#### Navigate through the tabs to explore visualizations of the Oceanus Folk community for:

-   All works of the Oceanus Folk community
-   The degree of separation of the Oceanus Folk community from Sailor Shift
-   Three degrees of separation from Sailor Shift

::: panel-tabset
## Oceanus Folk Community

```{r}
#| code-fold: true
#| code-summary: "Show Code"

chosen_genre = "Oceanus Folk"

genre_creators = creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(song_genre == chosen_genre) %>%
  pull(creator_from)

genre_music = creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(song_genre == chosen_genre) %>%
  pull(song_to)

genre_all_nodes <- unique(c(genre_creators,
                    genre_music))

# Create subgraph
sub_graph <- graph %>%
  filter(name %in% genre_all_nodes)

# Visualisation

g <- sub_graph %>%
  ggraph(layout = "kk") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name %in% c("Sailor Shift", "Ivy Echos", "Wei Zhao"), 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == "Sailor Shift", "Sailor Shift", NA)
    ),
    fontface = "bold",
    size = 3,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 9, height_svg = 8)
```

## Degree of Separation from Sailor Shift

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Convert to igraph object
sub_igraph <- as.igraph(sub_graph)

# Find Sailor Shift's vertex ID
artist_id <- which(V(sub_igraph)$name == chosen_node_1)

# Calculate distances from Sailor Shift
distances <- distances(sub_igraph, v = artist_id, mode = "all") # Future work: somehow there are some degree infinite when the graph shows that they are connected. How to fix?

# Convert to tidy format, calculate distances and handle infinite values
distance_df <- tibble(
  name = V(sub_igraph)$name,
  degree = as.numeric(distances[1, ])
)

filtered_nodes <- distance_df %>%
  pull(name)

filtered_nodes <- unique(c(filtered_nodes,
                    chosen_node_1))

# Create subgraph
filtered_graph <- sub_graph %>%
  filter(name %in% filtered_nodes) %>%
  activate(nodes) %>%
  left_join(distance_df, by = "name")

# Visualisation

g <- filtered_graph %>%
  ggraph(layout = "kk") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = degree,
      shape = `Node Type`,
      size = ifelse(node_name %in% c("Sailor Shift", "Ivy Echos", "Wei Zhao"), 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Degree: %s", node_name, genre, notable, release_date, degree
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s<br/>Degree: %s", node_name, genre, notable, release_date, single, degree
        ),
        TRUE ~ sprintf("%s<br/>Degree: %s", node_name, degree)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == "Sailor Shift", "Sailor Shift", NA)
    ),
    fontface = "bold",
    size = 3,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity() + 
  scale_color_gradientn(
    name = "Degree",
    colors = c("#2E3192", "#FFA757", "grey50"),
    values = scales::rescale(c(0, 6,13)),
    na.value = "grey50",
    limits = c(0, 13),
    breaks = 0:13,
  )

girafe(ggobj = g, width_svg = 9, height_svg = 8)
```
:::

::: callout-tip
## How has she influenced collaborators of the broader Oceanus Folk community?

-   This graph is displays a network overview of all People/Musical Groups who have produced Oceanus Folk Songs/Albums.
-   While Sailor Shift is connected to a portion of the Oceanus Folk community, most artists in this genre remain outside her influence network - either as distant connections (3rd to 13th degree) or completely unconnected.
-   In conclusion, Sailor Shift has a moderate influence on the broader Oceanus Folk community since her impact is discernible but not widespread.
:::

::: callout-warning
## Other Insights

-   It seems that the Oceanus Folk community places a strong emphasis on collaboration
-   Rather than simply drawing influence from each other's work, they prefer collaborating directly
    -   Evidenced by the sporadic 'Influenced By' connections in the network graph
:::

# 5 VAST 2025 MC1 Question 2

Develop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.

# 4 Exploratory Data Analysis (EDA) - Sailor's Network

-   In total, Sailor Shift released 38 Songs and Albums from 2024 to 2040
-   Details on the Songs and Albums can be found in the table below
-   Sailor Shift released 4 Songs in 2028
    -   Among those, only 1 is a Single
    -   Therefore, the viral Song that spark her breakthrough is **High Tide Heartbeat**
-   Among her Songs and Albums, 36 belong to the Oceanus Folk genre, while there is 1 Americana and 1 Synthwave Album each.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Step 0: Get name of 'Sailor Shift'
sailor_vertex_name <- mc1_nodes_clean %>%
  filter(is_sailor == TRUE) %>%
  pull(name)

# Step 1: Find outgoing edges from Sailor Shift
sailor_out_edges <- mc1_edges_clean %>%
  filter(from == sailor_vertex_name)

# Step 2: Identify neighbour node names
sailor_out_node_names <- sailor_out_edges$to

# Step 4: Identify songs/albums
sailor_music_all <- mc1_nodes_clean %>%
  filter(name %in% sailor_out_node_names, `Node Type` %in% c("Song", "Album")) %>%
  pull(name)

mc1_nodes_clean %>%
  filter(name %in% sailor_music_all) %>%
  arrange(release_date) %>%
  select(`Node Type`, node_name, release_date, genre, notable, single, notoriety_date) %>%
  kable() %>%
  kable_styling("striped", full_width = F) %>% 
  scroll_box(height = "300px")
```

```{r}
#| code-fold: true
#| code-summary: "Show Code"


# Prepare data
sailor_release_data <- mc1_nodes_clean %>%
  filter(name %in% sailor_music_all) %>%
  count(release_date, genre)

# Plot
ggplot(sailor_release_data, aes(x = release_date, y = n, fill = genre)) +
  geom_col() +
  geom_vline(xintercept = 2028, linetype = "dashed", color = "red") +
    annotate("text", 
           x = 2028, 
           y = max(sailor_release_data$n) + 0.5,
           label = "Viral Breakthrough", 
           color = "red", 
           size = 3.5,
           angle = 0,        # <- horizontal
           vjust = -0.5,     # <- moves it slightly above
           hjust = 0.5       # <- centers it horizontally
  ) +
  scale_fill_brewer(palette = "Pastel1") +
  labs(
    title = "Sailor Shift's Music Releases (2024–2040)",
    x = "Year",
    y = "Number of Songs/Albums",
    fill = "Genre"
  ) +
  theme_minimal()
```

## 5.1 Question 2a) Was this influence intermittent or did it have a gradual rise?

We will explore these three areas to understand the influence of Oceanus Folk over time:

1.  Yearly number of Oceanus Folk Music releases

2.  Yearly number of works influenced by Oceanus Folk Music

3.  Yearly number of Oceanus Folk Artists, Influenced Artists and Collaborators

### 5.1.1 Yearly number of Oceanus Folk Music releases

The number of Oceanus Folk Music (Songs/Albums) releases that were released each year are obtained using the codes below:

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Get all node names in Oceanus Folk genre
oceanus_nodes <- mc1_nodes_clean %>%
  filter(genre == chosen_genre) %>%
  pull(name)

# Step 2: Count number of oceanus folk nodes by release date
oceanus_nodes_by_date <- mc1_nodes_clean %>%
  filter(name %in% unique(oceanus_nodes)) %>%
  count(release_date, name = "oceanus_nodes_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(oceanus_nodes_count))



# Visualisation

plot_ly(
  data = oceanus_nodes_by_date,
  x = ~release_date,
  y = ~oceanus_nodes_count,
  type = "bar",
  name = "Number of Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", oceanus_nodes_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Oceanus Folk Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    ),
    annotations = list(
      list(
        x = 2024, 
        y = 280,
        text = "<b>2024: Sailor Shift's Debut</b>",
        xref = "x", yref = "y",
        xanchor = "right",
        showarrow = TRUE, arrowhead = 2,
        ax = -30, ay = -40,
        font = list(color="#2E3192", size=12)
      ),
      list(
        x = 2028, 
        y = 320,
        text = "<b>2028: Sailor Shift's Breakthrough</b>",
        xref = "x", yref = "y",
        xanchor = "right",
        showarrow = TRUE, arrowhead = 2,
        ax = -30, ay = -40,
        font = list(color="#2E3192", size=12)
      )
    ),
    shapes = list(
      list(
        type = "line",
        x0 = 2024, x1 = 2024,
        y0 = 0, y1 = 280,
        line = list(dash="dash", color="grey")
      ),
      list(
        type = "line",
        x0 = 2028, x1 = 2028,
        y0 = 0, y1 = 320,
        line = list(dash="dash", color="grey")
      )
    )
  )
```

[**Insights**]{.underline}

The chart illustrates the rise of Oceanus Folk music from its origins in 1992 to 2040. The blue bars represent the number of Oceanus Folk songs or albums released each year, highlighting notable spikes especially in the mid-2020s.

The red line shows the cumulative total of Oceanus Folk releases over time, which demonstrates a steady and sustained growth in Oceanus Folk music. This growth before plateauing in 2040, indicating that the genre has matured.

Two key milestones in Sailor Shift’s career - her solo debut in 2024 and breakthrough in 2028 were also mapped in the chart. The significant increases in Oceanus Folk music releases occurred in 2023 and 2026, which were the years immediately before and after her key milestones. This suggests that Sailor Shift’s emergence coincided with a rising wave of Oceanus Folk music, and that her success helped to fuel the genre’s growth in the subsequent years.

### 5.1.2 Influence based on number of works that were influenced by Oceanus Folk music

To measure how Oceanus Folk influenced the broader music landscape, we tracked how often songs and albums from other genres were influenced by Oceanus Folk works. These influence relationships were drawn from edge types consisting InStyleOf, CoverOf, InterpolatesFrom, LyricalReferenceTo, and DirectlySamples.

We then focused on edges where an Oceanus Folk song or album is the target (to), and the source (from) is the influenced work. The release date of each influenced work and number of such works for each year were extracted. To reveal long-term trends, cumulative total of influenced works are calculated.

The above approach is reflected in the codes below:

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced music by release date
influence_yearly <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(song_to %in% unique(oceanus_nodes),
         `Edge Colour` == "Influenced By",
         infuence_music_collaborate != song_to) %>%
  distinct(infuence_music_collaborate, influence_release_date) %>%
  count(influence_release_date, name = "num_influenced_nodes") %>%
  complete(influence_release_date = 1975:2040, fill = list(num_influenced_nodes = 0)) %>%
  arrange(influence_release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_influenced = cumsum(num_influenced_nodes))



# Visualisation

plot_ly(
  data = influence_yearly,
  x = ~influence_release_date,
  y = ~num_influenced_nodes,
  type = "bar",
  name = "Number of Influenced Songs/Albums",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0("Year: ", influence_release_date, "<br>Influenced: ", num_influenced_nodes)
) %>%
add_trace(
  y = ~cumulative_influenced,
  type = "scatter",
  mode = "lines+markers",
  name = "Cumulative Influenced",
  line = list(color = "black", width = 2),
  marker = list(color = "red", size = 6),
  hoverinfo = "text",
  hovertext = ~paste0("Year: ", influence_release_date, "<br>Cumulative: ", cumulative_influenced)
) %>%
layout(
  title = "Yearly Oceanus Folk Music Influence on Songs/Albums",
  margin = list(b = 80, t = 80),
  xaxis = list(
  title = NA,
  dtick = 5,
  automargin = TRUE,
  range = c(1990, 2040)
),
  yaxis = list(
  title = "Count",
  automargin = TRUE,
  range = c(0, 300)
),
  legend = list(
    orientation = "h",
    x = 0.5,
    xanchor = "center",
    y = -0.1
  ),
  annotations = list(
    list(
      x = 2024,
      y = 250,
      text = "<b>2024: Sailor Shift's Debut</b>",
      xref = "x", yref = "y",
      xanchor = "right",
      showarrow = TRUE, arrowhead = 2,
      ax = -30, ay = -40,
      font = list(color = "#2E3192", size = 12)
    ),
    list(
      x = 2028,
      y = 280,
      text = "<b>2028: Sailor Shift's Breakthrough</b>",
      xref = "x", yref = "y",
      xanchor = "right",
      showarrow = TRUE, arrowhead = 2,
      ax = -30, ay = -40,
      font = list(color = "#2E3192", size = 12)
    )
  ),
  shapes = list(
    list(
      type = "line",
      x0 = 2024, x1 = 2024,
      y0 = 0, y1 = 280,
      line = list(dash = "dash", color = "grey")
    ),
    list(
      type = "line",
      x0 = 2028, x1 = 2028,
      y0 = 0, y1 = 320,
      line = list(dash = "dash", color = "grey")
    )
  )
)
```

[**Insights**]{.underline}

This chart shows the rise of Oceanus Folk music as a source of influence in the music landscape over time since it was introduced in 1992. The blue bars represent the number of influence works each year and the red line shows the cumulative total showing long-term trends.

From the 1990s through early 2000s, Oceanus Folk had very few influenced work. From 2010s onwards, Oceanus Folk music became more influential, followed by several spikes between 2010 and 2022, showing growing influence of the genre before Sailor Shift's debut.

In 2023, there was a sharp increase in both the number of yearly influenced works and the cumulative total. The rising wave of Oceanus Folk influenced music had coincided with Sailor Shift’s rise and the influence continued to accelerate with Sailor's breakthrough until 2029.

After 2030, the influence tapers off, suggesting the genre may have matured or plateaued.

### 5.1.3 Influence based on number of Oceanus Folk Artists and Influenced Artists

We examined the network of people and groups involved in Oceanus Folks music creation and influence. Our analysis begins by identifying all artists (i.e. Person and Musical Group) directly connected to Oceanus Folk music via these edges (PerformerOf, ComposerOf , ProducerOf, LyricistOf ) for Oceanus Folk songs and albums. We also added members of musical groups (i.e. collaborators) that contributed to Oceanus Folk works.

In parallel, we traced those influenced by Oceanus Folk: people and groups who created songs or albums influenced by Oceanus works music (i.e. with edges belonging to InStyleOf, InterpolatesFrom, CoverOf, LyricalReferenceTo and DirectlySamples). Similarly, members of musical groups (i.e. collaborators) that created works influenced by Oceanus Folk works were included.

Together, these artists form a comprehensive view of Oceanus Folk’s influence on the music landscape.

```{r}
#| code-fold: true
#| code-summary: "Show Code"


# Step 1: Count number of influenced artists by release date
creators_by_date <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(song_to %in% unique(oceanus_nodes),
         influence_creator != creator_from) %>%
  # Get unique artist-date pairs first
  distinct(influence_creator, influence_release_date) %>%
  # Find first influence date for each artist
  group_by(influence_creator) %>%
  summarize(
    first_influence_date = if(n() > 0) min(influence_release_date) else NA_real_,
    .groups = "drop"
  ) %>%
  # Count new artists by first influence date
  count(first_influence_date, name = "people_count") %>%
  arrange(first_influence_date) %>%
  rename(influence_release_date = first_influence_date) %>%
  # Calculate cumulative unique artists
  mutate(cumulative_count = cumsum(people_count))



# Visualisation

plot_ly(
  data = creators_by_date,
  x = ~influence_release_date,
  y = ~people_count,
  type = "bar",
  name = "Number of Artists",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", influence_release_date,
    "<br>Count: ", people_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", influence_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Annual Count of New Oceanus Folk Artist Influences & Collaborations",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    ),
    annotations = list(
      list(
        x = 2024, 
        y = 800,
        text = "<b>2024: Sailor Shift's Debut</b>",
        xref = "x", yref = "y",
        xanchor = "right",
        showarrow = TRUE, arrowhead = 2,
        ax = -30, ay = -40,
        font = list(color="#2E3192", size=12)
      ),
      list(
        x = 2028, 
        y = 1120,
        text = "<b>2028: Sailor Shift's Breakthrough</b>",
        xref = "x", yref = "y",
        xanchor = "right",
        showarrow = TRUE, arrowhead = 2,
        ax = -30, ay = -40,
        font = list(color="#2E3192", size=12)
      )
    ),
    shapes = list(
      list(
        type = "line",
        x0 = 2024, x1 = 2024,
        y0 = 0, y1 = 800,
        line = list(dash="dash", color="grey")
      ),
      list(
        type = "line",
        x0 = 2028, x1 = 2028,
        y0 = 0, y1 = 1120,
        line = list(dash="dash", color="grey")
      )
    )
  )
```

[**Insights**]{.underline}

This chart shows the rise of Oceanus Folk music as a source of influence in the music landscape over time since it was introduced in 1992. The blue bars represent the number of influence works each year and the red line shows the cumulative total showing long-term trends.

From the 1990s through early 2000s, Oceanus Folk had very few influenced work. From 2010s onwards, Oceanus Folk music became more influential, followed by several spikes between 2010 and 2022, showing growing influence of the genre before Sailor Shift's debut.

In 2023, there was a sharp increase in both the number of yearly influenced works and the cumulative total. The rising wave of Oceanus Folk influenced music had coincided with Sailor Shift’s rise and the influence continued to accelerate with Sailor's breakthrough until 2029.

After 2030, the influence tapers off, suggesting the genre may have matured or plateaued.

#### 5.1.3.1 Genre Star Factor

```{r}
#| code-fold: true
#| code-summary: "Show Code"


# Step 1: First get the song-level influence data (similar to your Step 10)
song_influence_lists <- creator_and_songs_and_influences_and_creators_collaborate %>%
  group_by(song_to, song_name, creator_release_date, song_genre, notable) %>%
  distinct () %>%
  summarize(
    unique_collaborate = list(unique(na.omit(infuence_music_collaborate[creator_from != influence_creator & `Edge Colour` == "Creator Of"]))),
    unique_influence_creators = list(unique(na.omit(influence_creator[creator_from != influence_creator & `Edge Colour` == "Influenced By"]))),
    unique_influence_music = list(unique(na.omit(infuence_music_collaborate[creator_from != influence_creator & !is.na(influence_genre)])))
  )

# Step 2: Aggregate statistics by genre
genre_stats <- song_influence_lists %>%
  group_by(song_genre) %>%
  summarize(
    total_songs = n_distinct(song_to),
    notable_hits = sum(notable == TRUE, na.rm = TRUE),
    collaboration = length(unique(unlist(unique_collaborate))),
    influence_creators = length(unique(unlist(unique_influence_creators))),
    collaboration_influence_creator = length(unique(c(unlist(unique_influence_creators),unlist( unique_collaborate)))),
    influence_music = length(unique(unlist(unique_influence_music)))
  )

# Step 12: Create Scoring Rubric
genre_rankings <- genre_stats %>%
  mutate(
    # Normalize each metric (0-1 scale)
    songs_score = (total_songs - min(total_songs)) / (max(total_songs) - min(total_songs)),
    notable_score = (notable_hits - min(notable_hits)) / (max(notable_hits) - min(notable_hits)),
    artists_score = (collaboration_influence_creator - min(collaboration_influence_creator)) / (max(collaboration_influence_creator) - min(collaboration_influence_creator)),
    music_score = (influence_music - min(influence_music)) / (max(influence_music) - min(influence_music)),
    
    # Calculate composite score (equal weighting)
    composite_score = songs_score + notable_score + artists_score + music_score
  ) %>%
  arrange(desc(composite_score)) %>%
  select(song_genre, total_songs, notable_hits, collaboration_influence_creator, influence_music, composite_score)

# Step 13: Final Ranked Table
genre_rankings %>%
  mutate(
    Rank = row_number(),
    `Star Factor` = round(composite_score, 2)
  ) %>%
  select(Rank, song_genre, total_songs, notable_hits, collaboration_influence_creator, 
         influence_music, `Star Factor`) %>%
  rename(
    `Genre` = song_genre,
    `Total Music` = total_songs,
    `Notable Hits` = notable_hits,
    `Artist Influ & Colab` = collaboration_influence_creator,
    `Music Influenced` = influence_music
  ) %>%
  kable(caption = "Genre Ranked by Star Factor") %>%
  kable_styling("striped", full_width = F) %>%
  scroll_box(height = "300px")
```

(didnt copy over combined plot)

### 5.1.4 Bayesian Surprise

We have analysed the Oceanus Folks music influence trends over time using line and bar charts. Besides visual plots, we can quantify if the influence was intermittent or gradual using the statistical tool - Bayesian Surprise.

Bayesian Surprise is a concept in information theory, which is used to identify moments of unexpected change in sequential data. Based our [research](https://arxiv.org/html/2410.15996v1), it is suitable for analysing trends like the spread of musical influence and temporal pattern detection.

To compute Bayesian Surprise, we treat each year as a new observation and compare the current year’s count to the prior expectation which is modelled using a Poisson probability distribution which is suitable for our count data across years.

These are the steps in generating the Surprise Score:

-   Obtain the yearly time series data from the previous 3 analysis.

-   Model prior belief based on previous year(s)

-   Compute posterior with the new data

-   Calculate Bayesian Surprise as the KL divergence (Kullback–Leibler divergence) between the prior and posterior

The Surprise Computation Function is defined using the following codes:

```{r}
#| code-fold: true
#| code-summary: "Show Code"


library(zoo)

# Define general function to compute Bayesian Surprise
compute_bayesian_surprise <- function(data, year_col, count_col, window = 5) {
  data <- data %>%
    rename(year = {{year_col}}, count = {{count_col}}) %>%
    complete(year = min(year):max(year), fill = list(count = 0)) %>%
    arrange(year)

  # Calculate moving average (prior belief)
  data <- data %>%
    mutate(prior_mean = rollmean(count, k = window, align = "right", fill = NA))

  # Compute KL Divergence for Poisson distributions
  data <- data %>%
    mutate(
      surprise = ifelse(
        !is.na(prior_mean) & prior_mean > 0 & count > 0,
        count * log(count / prior_mean) - (count - prior_mean),
        NA
      )
    )

  return(data)
}
```

Bayesian Surprise is computed using KL Divergence between each year’s observed value and a rolling average of the previous five years, treating yearly counts as Poisson-distributed events using the following:

```{r}
#| code-fold: true
#| code-summary: "Show Code"


# 1. Surprise for Oceanus Folk releases
surprise_releases <- compute_bayesian_surprise(
  oceanus_nodes_by_date,
  release_date,
  oceanus_nodes_count,
  window = 5
)

# 2. Surprise for influenced works
surprise_influence <- compute_bayesian_surprise(
  influence_yearly,
  influence_release_date,
  num_influenced_nodes,
  window = 5
)

# 3. Surprise for artists and contributors
surprise_contributors <- compute_bayesian_surprise(
  creators_by_date,
  influence_release_date,
  people_count,
  window = 5
)

```

[**Bayesian Surprise Across Oceanus Folk Music Releases, Influenced Works, and Artists**]{.underline}

```{r}
#| code-fold: true
#| code-summary: "Show Code"


plot_data <- bind_rows(
  surprise_releases %>% select(year, surprise) %>% mutate(type = "Music Releases"),
  surprise_influence %>% select(year, surprise) %>% mutate(type = "Influenced Works"),
  surprise_contributors %>% select(year, surprise) %>% mutate(type = "Artists")
) %>%
  filter(!is.na(surprise), year >= 1990)

# Plot using Plotly
plot_ly(data = plot_data, x = ~year, y = ~surprise, color = ~type, colors = "Set1",
        type = 'scatter', mode = 'lines+markers',
        hoverinfo = "text",
        hovertext = ~paste0("Year: ", year,
                            "<br>Category: ", type,
                            "<br>Surprise: ", round(surprise, 2))) %>%
  layout(
    title = "Bayesian Surprise Across Oceanus Folk Music Releases, Influenced Works, and Artists",
    xaxis = list(title = "Year", dtick = 5, range = c(1990, max(plot_data$year))),
    yaxis = list(title = "Surprise Score (KL Divergence)"),
    legend = list(orientation = "h", x = 0.5, xanchor = "center", y = -0.2),
    margin = list(t = 60, b = 80)
  )
```

[**Insights**]{.underline}

The Bayesian Surprise analysis showed that Oceanus Folk's influence was intermittent rather than a smooth, gradual rise. While cumulative trends in music releases, influenced works and artist numbers may suggest steady growth, Bayesian Surprise uncovers a different insight that there were indeed intermittent surges of activity.

For example, the sharp peaks in surprise scores for artists (red line) in years like 2004, 2010, 2017, and especially 2023 suggest that Oceanus Folk influence had waves of breakthroughs and not slow accumulation.

Influenced works (blue line) increased in 2017, spiked in 2023 and sustained its increase across 2030 to 2033, which shows how Sailor’s debut and breakthrough had catalysed Oceanus Folk genre influence.

Music releases (green line) generally showed lower surprise, which confirms that number of Oceanus Folks music was not a key driver to influence.

Thus, while the overall trend shows long-term growth, Bayesian Surprise confirms that Oceanus Folk’s rise was intermittent and driven by burst such as artist breakthrough. Such bursts also maintained the momentum of the influence for an interval of time.

(Didnt copy over animation)

## 5.2 Question 2b) What genres and top artists have been most influenced by Oceanus Folk?

### 5.2.1 What genres have been most influenced by Oceanus Folk?

To determine which genres have been most influenced by Oceanus Folk, all songs and albums were identified. Then, the music (Songs/Albums) that influenced them were obtained to calculate the frequency and percentage of Oceanus Folk's influence across different musical genre. This analysis reveals the genres that show the strongest impact from Oceanus Folk's musical style.

```{r}
#| code-fold: true
#| code-summary: "Show Code"


genre_influence_stats <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(infuence_music_collaborate != song_to) %>%
  distinct(song_to, song_genre, infuence_music_collaborate, influence_genre, `Edge Colour`) %>%
  group_by(song_genre) %>%
  summarize(
    total_music = n_distinct(song_to),
    total_influences = n_distinct(na.omit(infuence_music_collaborate[!is.na(influence_genre)])),
    oceanus_influences = n_distinct(na.omit(infuence_music_collaborate[influence_genre == chosen_genre])),
    other_influences = total_influences - oceanus_influences,
    perc_oceanus = round(oceanus_influences / total_influences * 100, 1),
    no_influences = sum(is.na(influence_genre)),
  ) %>%
  arrange(desc(perc_oceanus))

genre_influence_stats %>%
  kable(caption = "Genre Ranked by Oceanus Influence") %>%
  kable_styling("striped", full_width = F) %>%
  scroll_box(height = "300px")
```

```{r}
#| code-fold: true
#| code-summary: "Show Code"


library(networkD3)

# Step 1: Prepare data — treat Oceanus Folk as source and include self-influence
sankey_df <- genre_influence_stats %>%
  mutate(
    source = "Oceanus Folk",
    raw_target = ifelse(song_genre == "Oceanus Folk", "Oceanus Folk (in-genre influence)", song_genre),
    value = oceanus_influences,
    target = paste0(raw_target, " (", value, ")")  # ← append the number
  ) %>%
  select(source, target, value) %>%
  arrange(desc(value)) %>%
  head(22)

# Step 2: Create unique nodes
nodes <- data.frame(name = unique(c(sankey_df$source, sankey_df$target)))

# Step 3: Convert names to indices
links <- sankey_df %>%
  mutate(
    source = match(source, nodes$name) - 1,
    target = match(target, nodes$name) - 1
  )

# Step 4: Plot Sankey (Oceanus Folk on the left)
sankeyNetwork(
  Links = links,
  Nodes = nodes,
  Source = "source",
  Target = "target",
  Value = "value",
  NodeID = "name",
  fontSize = 13,
  nodeWidth = 30,
  sinksRight = TRUE  # Flow goes left (source) to right (target)
)
```

::: callout-tip
## What genres have been most influenced by Oceanus Folk?

-   The table above show the top 10 genres who was most influenced by Oceanus Folk.
-   The Oceanus Folk genre has been the most influenced by itself with about 40% of all music (Songs/Albums) drawing inspiration from Oceanus Folk music.
-   The next most influenced genre is Desert Rock with about a fifth of all music drawing inspiration from Oceanus Folk.
:::

### 5.2.2 Which top artists have been most influenced by Oceanus Folk?

To identify the top artists most influenced by Oceanus Folk, all artists (persons or musical groups) who either (a) created Oceanus Folk music (songs/albums) or (b) were influenced by the genre were identified. Then, all music produced by these artists, along with the musical works that influenced their creations, was counted to reveal those who were most influenced.

```{r}
#| code-fold: true
#| code-summary: "Show Code"


creator_influenced_by_stats <- creator_and_songs_and_influenced_by_creator %>%
  distinct(creator_name, creator_node_type, song_to, song_genre, influenced_by, influenced_by_genre, influenced_by_creator, notable) %>%
  group_by(creator_name, creator_node_type) %>%
  summarize(
    total_music = n_distinct(song_to),
    notable_hits = n_distinct(song_to[notable == TRUE]),
    oceanus_music = n_distinct(song_to[song_genre == chosen_genre]),
    oceanus_influenced_by = n_distinct(na.omit(influenced_by[influenced_by_genre == chosen_genre & creator_name != influenced_by_creator])),
    total_oceanus_influence = oceanus_music + oceanus_influenced_by
  ) %>%
  arrange(desc(total_oceanus_influence)) %>%
  filter(creator_node_type == "Person", notable_hits > 10) %>%
  select(-creator_node_type)

creator_influenced_by_stats %>%
  head(10) %>%
  rename(
    `Artist` = creator_name,
    `Total Music` = total_music,
    `Notable Hits` = notable_hits,
    `No. of Oceanus Folk Music` = oceanus_music,
    `Oceanus Folk Influence` = oceanus_influenced_by,
    `Oceanus Folk Music & Influence` = total_oceanus_influence
  ) %>%
  kable(caption = "Ranking of Oceanus Folk Influence on Artists") %>%
  kable_styling("striped", full_width = F) %>%
  scroll_box(height = "200px")
```

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Step 1: Prepare data — treat Oceanus Folk as source and include self-influence
sankey_df <- creator_influenced_by_stats %>%
  mutate(
    source = "Oceanus Folk",
    raw_target = creator_name,
    value = total_oceanus_influence,
    target = paste0(raw_target, " (", value, ")")  # ← append the number
  ) %>%
  select(source, target, value) %>%
  arrange(desc(value)) %>%
  head(10)

# Step 4: Nodes (no need for group column)
nodes <- data.frame(name = unique(c(sankey_df$source, sankey_df$target)))

# Step 5: Convert names to indices
links <- sankey_df %>%
  mutate(
    source = match(source, nodes$name) - 1,
    target = match(target, nodes$name) - 1
  )

# Step 6: Plot Sankey (same as before)
sankeyNetwork(
  Links = links,
  Nodes = nodes,
  Source = "source",
  Target = "target",
  Value = "value",
  NodeID = "name",
  fontSize = 13,
  nodeWidth = 30,
  sinksRight = TRUE,
  height = 600,
  width = 1000
)
```

::: callout-tip
## Which top artists have been most influenced by Oceanus Folk?

-   The table above show the top 10 artists who was most influenced by Oceanus Folk
    -   These are artists who have produced Oceanus Folk music or have been influenced by it.
    -   Top artists are defined by having more than 10 notable hits.
    -   These artists are rank by the amount that Oceanus Folk has influenced them.
-   The top artist is Sailor Shift who has produced 36 Oceanus Folk songs.
-   The next artist is Min He, who has produced one Oceanus Folk song and has been influenced by 10 other Oceanus Folk songs, bringing the total to 11 songs.
:::

## 5.3 Question 2c) On the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?

We will examine the diversity of musical genres that has influenced and been influenced by Oceanus Folk over time. This can be measured by Genre Entropy, which comes from information theory where higher entropy means more variety and unpredictability, while lower entropy means concentration in fewer genres, as explained by Ferwerda and Schedl (2016) in their research paper.

For our case, we will compute:

Incoming entropy = How diverse other genres were in influencing Oceanus Folk music in a given year (i.e. what genres inspired new Oceanus Folk music)

Outgoing entropy = How diverse the genres were which Oceanus Folk had influenced (i.e. what range of genres borrowed from Oceanus Folk).

By plotting both directions of entropy over time using a mirrored bar chart and mapping it against Sailor's debut and breakthrough, we can visualise the change and impact clearly.

```{r}
#| code-fold: true
#| code-summary: "Show Code"


# Step 1: Filter influence edges
influence_edges <- mc1_edges_clean %>%
  filter(`Edge Type` %in% c("InStyleOf", "CoverOf", "InterpolatesFrom", 
                            "LyricalReferenceTo", "DirectlySamples"))

# Step 2: Join genre and release date info
influence_genres <- influence_edges %>%
  left_join(mc1_nodes_clean %>% select(name, genre), by = c("from" = "name")) %>%
  rename(source_genre = genre) %>%
  left_join(mc1_nodes_clean %>% select(name, genre, release_date), by = c("to" = "name")) %>%
  rename(target_genre = genre, to_release = release_date) %>%
  left_join(mc1_nodes_clean %>% select(name, release_date), by = c("from" = "name")) %>%
  rename(from_release = release_date)

# Step 3a: Incoming entropy (genres influencing Oceanus Folk)
incoming_entropy_yearly <- influence_genres %>%
  filter(target_genre == "Oceanus Folk", !is.na(source_genre), !is.na(to_release)) %>%
  mutate(year = as.integer(to_release)) %>%
  group_by(year, source_genre) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(year) %>%
  mutate(p = count / sum(count)) %>%
  summarise(entropy = entropy::entropy(p, unit = "log2")) %>%
  mutate(direction = "Incoming")

# Step 3b: Outgoing entropy (genres that Oceanus Folk influenced)
outgoing_entropy_yearly <- influence_genres %>%
  filter(source_genre == "Oceanus Folk", !is.na(target_genre), !is.na(from_release)) %>%
  mutate(year = as.integer(from_release)) %>%
  group_by(year, target_genre) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(year) %>%
  mutate(p = count / sum(count)) %>%
  summarise(entropy = entropy::entropy(p, unit = "log2")) %>%
  mutate(direction = "Outgoing")

# Step 4: Combine and flip outgoing for mirrored effect
entropy_yearly <- bind_rows(
  incoming_entropy_yearly,
  outgoing_entropy_yearly %>% mutate(entropy = -entropy)
)

# Step 5: Plot mirrored entropy over time with hover text
entropy_plot <- ggplot(entropy_yearly, aes(
  x = year, y = entropy, fill = direction,
  text = paste0(
    "Year: ", year,
    "\nDirection: ", direction,
    "\nEntropy: ", round(abs(entropy), 3), " bits"
  )
)) +
  geom_col(width = 0.8) +
  geom_hline(yintercept = 0, color = "black") +
  scale_fill_manual(
    name = "Entropy Direction",
    values = c("Incoming" = "lightblue", "Outgoing" = "darkblue")
  ) +
  scale_y_continuous(
    breaks = seq(-4, 4, by = 1),
    labels = abs(seq(-4, 4, by = 1)),
    limits = c(-4, 4)
  ) +
  labs(
    title = "Genre Entropy of Oceanus Folk Over Time",
    x = "Year",
    y = "Genre Entropy (bits)"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

# Add annotations after setting `max_entropy_val`
max_entropy_val <- max(abs(entropy_yearly$entropy), na.rm = TRUE)

entropy_plot <- entropy_plot +
  geom_vline(xintercept = 2024, linetype = "dashed", color = "grey50", linewidth = 0.7) +
  geom_vline(xintercept = 2028, linetype = "dashed", color = "grey50", linewidth = 0.7) +
  annotate("text", x = 2024.5, y = max_entropy_val + 0.4,
           label = "2024: Sailor Shift's Debut",
           color = "#2E3192", fontface = "bold", size = 3.5, hjust = 1) +
  annotate("text", x = 2028.5, y = max_entropy_val + 0.8,
           label = "2028: Sailor Shift's Breakthrough",
           color = "#2E3192", fontface = "bold", size = 3.5, hjust = 1) +
  annotate("segment", x = 2024.5, y = max_entropy_val + 0.4,
           xend = 2024, yend = max_entropy_val - 0.2,
           arrow = arrow(length = unit(0.2, "cm")), color = "grey50") +
  annotate("segment", x = 2028.5, y = max_entropy_val + 0.8,
           xend = 2028, yend = max_entropy_val - 0.2,
           arrow = arrow(length = unit(0.2, "cm")), color = "grey50")

# Use plotly for interactivity
ggplotly(entropy_plot, tooltip = "text") %>%
  layout(legend = list(orientation = "h", x = 0.5, xanchor = "center", y = -0.2))
```

[**Insights**]{.underline}

**Before 2013: Limited Influence during earlier years**

During the early years of Oceanus Folk, both incoming and outgoing entropy remained sparse, indicating limited cross-genre interaction. However, there are more bars for incoming entropy, showing that Oceanus Folk was more often influenced by other genres than influencing others. This suggests that during the earlier years, Oceanus Folk was still developing its identity by absorbing influence from a diverse set of genres.

**2013 to 2024: Influence Growth**

Between 2013 and 2024, we observe a gradual and sustained rise in both incoming and outgoing entropy.This period can be seen as the maturation phase of Oceanus Folk, where it begins to both learn from and contribute to the wider music landscape.

**2024 onwards: Sailor Shift's Rise**

Incoming entropy began to decline, suggesting that Oceanus Folk was no longer absorbing influence from other genres as it solidified its musical identity.

In contrast, outgoing entropy peaked and remained elevated, reflecting that other genres increasingly drew inspiration from Oceanus Folk. This sustained high outgoing influence signals that Oceanus Folk had become a genre of reference across many genres.

### 5.3.2 From which genres does Oceanus Folk draw most of its contemporary inspiration?

This analysis examines the contemporary influences on Oceanus Folk by using the genre influence patterns methodology similar to Section 5.2.1.

```{r}
#| code-fold: true
#| code-summary: "Show Code"


genre_influenced_by_stats <- creator_and_songs_and_influenced_by_creator %>%
  filter(song_genre == chosen_genre) %>%
  distinct(song_to, influenced_by, influenced_by_genre) %>%
  group_by(influenced_by_genre) %>%
  summarize(
    total_music = n_distinct(song_to),
    influenced_by = n_distinct(na.omit(influenced_by))
  ) %>%
  arrange(desc(influenced_by))

genre_influenced_by_stats %>%
  head(10) %>%
  rename(
    `Genre` = influenced_by_genre,
    `Total Influenced Music` = total_music,
    `Influenced By Oceanus Folk` = influenced_by
  ) %>%
  kable(caption = "Ranking of Oceanus Folk Influence on Music Genres") %>%
  kable_styling("striped", full_width = F) %>%
  scroll_box(height = "200px")
```

```{r}
#| code-fold: true
#| code-summary: "Show Code"
library(networkD3)
library(htmlwidgets)

# Step 1: Prepare data — treat Oceanus Folk as source and include self-influence
sankey_df <- genre_influenced_by_stats %>%
  mutate(
    source = chosen_genre,
    raw_target = influenced_by_genre,
    value = influenced_by,
    target = paste0(raw_target, " (", value, ")")  # ← append the number
  ) %>%
  select(source, target, value) %>%
  arrange(desc(value)) %>%
  head(22)

# Step 5: Create nodes and links
nodes <- data.frame(name = unique(c(sankey_df$source, sankey_df$target)))

links <- sankey_df %>%
  mutate(
    source = match(source, nodes$name) - 1,
    target = match(target, nodes$name) - 1
  )

# Step 6: Add tooltip text as a JS-accessible field
links$group <- paste0(sankey_df$source, " → ", sankey_df$target, ": ", sankey_df$value)

# Step 7: Sankey + tooltip rendering
p <- sankeyNetwork(
  Links = links,
  Nodes = nodes,
  Source = "source",
  Target = "target",
  Value = "value",
  NodeID = "name",
  fontSize = 13,
  nodeWidth = 30,
  sinksRight = TRUE
)

# Add hover tooltip with d.group
onRender(p, '
  function(el, x) {
    d3.select(el)
      .selectAll(".link")
      .append("title")
      .text(function(d) { return d.group; });
  }
')
```

::: callout-tip
## From which genres does Oceanus Folk draw most of its contemporary inspiration?

-   As expected, Oceanus Folk artists primarily draw inspiration from other Oceanus Folk works, demonstrating strong genre continuity.
-   Approximately a fifth of Oceanus Folk compositions appear to be original works without direct influences from existing pieces.
-   Indie Folk emerges as the second most influential genre, accounting for roughly 21% of all Oceanus Folk musical references.
:::

[**Reference**]{.underline}

Figueiredo, F., Panoutsos, T., & Andrade, N. (2024, October 21). *Surprising patterns in musical influence networks* (Version 1) \[Preprint\]. arXiv. Retrieved from <https://doi.org/10.48550/arXiv.2410.15996>

Ferwerda, B., & Schedl, M. (2016). *Investigating the relationship between diversity in music consumption behavior and cultural dimensions: A cross-country analysis* (SOAP’16 workshop paper, UMAP Extended Proceedings). CEUR Workshop Proceedings, 1618. Retrieved from <https://ceur-ws.org/Vol-1618/SOAP_paper1.pdf>

# 6 VAST 2025 MC1 Question 3

Use your visualizations to develop a profile of what it means to be a rising star in the music industry.

## 6.1 Analysing the careers of all Artists

The analysis identifies all musical artists, including both the songs/albums they produced and their influence relationships—tracking both the musical works they have influenced and the artists they have impacted throughout their careers.

A grading rubric is added to assess artists based on four equally weighted categories:

1.  Number of Music Releases
2.  Number of Notable Music
3.  Number of New Artists Influenced and Collaborated With
4.  Number of Music Influenced

Each category's score will be normalised using the formula:

```{r}
#| code-fold: true
#| code-summary: "Show Code"


library(latex2exp)
plot(1, 1, type = "n", ann = FALSE, axes = FALSE)
text(1, 1, 
     latex2exp::TeX("$\\frac{Artist's\\ Score - min((Score))}{max((Score)) - min((Score))}$"), 
     cex = 2)
```

The Star Factor will aggregate these normalized scores (maximum: 4) to rank the artists.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Get all creator names
global_creators <- mc1_nodes_clean %>%
  filter(`Node Type` %in% c("Person", "MusicalGroup"))

# Step 2: Get all outgoing edges from these creators
creator_out_edges <- mc1_edges_clean %>%
  filter(from %in% global_creators$name, `Edge Colour` == "Creator Of")

# Step 3: Get all songs made by creators
creator_music <- mc1_nodes_clean %>%
  filter(name %in% creator_out_edges$to)

# Step 4: Get all incoming edges from songs (music and collaborators)
creator_songs_in_edges <- mc1_edges_clean %>%
  filter(to %in% creator_music$name)

# Step 5: First join to get creator names (from)
creators <- creator_out_edges %>%
  left_join(mc1_nodes_clean, by = c("from" = "name")) %>%
  select(from, to, node_name, `Node Type`) %>%
  rename(creator_name = node_name, creator_node_type = `Node Type`)

# Step 6: Second join to get song names (to)
creator_and_songs <- creators %>%
  left_join(mc1_nodes_clean, by = c("to" = "name")) %>%
  select(from, creator_name, creator_node_type, to, node_name, release_date, genre, notable) %>%
  rename(creator_from = from, song_name = node_name, creator_release_date = release_date, song_genre = genre, song_to = to) %>%
  distinct()

# Step 7: Third join to get influenced songs / collaborators
creator_and_songs_and_influences <- creator_and_songs %>%
  left_join(creator_songs_in_edges %>% select(from, to, `Edge Colour`), by = c("song_to" = "to"), relationship = "many-to-many") %>%
  left_join(mc1_nodes_clean %>% select(name, genre, node_name, release_date), by = c("from" = "name")) %>%
  rename(influence_genre = genre, infuence_music_collaborate = from, infuence_music_collaborate_name = node_name, influence_release_date = release_date) %>%
  distinct()

# Step 8: Fourth join to get influenced song's creator
creator_and_songs_and_influences_and_creators <- creator_and_songs_and_influences %>%
  left_join(creator_out_edges %>% select(from, to), by = c("infuence_music_collaborate" = "to"), relationship = "many-to-many") %>%
  rename(influence_creator = from)

# Step 9: Add release date for collaborators
creator_and_songs_and_influences_and_creators_collaborate <- creator_and_songs_and_influences_and_creators %>%
  mutate(
    influence_release_date = case_when(
      `Edge Colour` == "Creator Of" ~ creator_release_date,
      TRUE ~ influence_release_date  # Keeps original value if not "Creator Of"
    ),
    influence_creator = case_when(   # A collaborator can also be considered influenced
      `Edge Colour` == "Creator Of" ~ infuence_music_collaborate,
      TRUE ~ influence_creator
    )
  )
  
# Step 10: To highlight songs that the creator influence that is not produced by same creator
creator_influence_lists <- creator_and_songs_and_influences_and_creators_collaborate %>%
  group_by(creator_name, creator_node_type, song_to, song_name, creator_release_date, song_genre, notable) %>%
  distinct () %>%
  summarize(
    unique_collaborate = list(unique(na.omit(infuence_music_collaborate[creator_from != influence_creator & `Edge Colour` == "Creator Of"]))),
    unique_influence_creators = list(unique(na.omit(influence_creator[creator_from != influence_creator & `Edge Colour` == "Influenced By"]))),
    unique_influence_music = list(unique(na.omit(infuence_music_collaborate[creator_from != influence_creator & !is.na(influence_genre)])))
  )

# Step 11: Aggregate unique influences per creator
creator_stats <- creator_influence_lists %>%
  group_by(creator_name) %>%
  summarize(
    total_songs = n_distinct(song_to),
    notable_hits = sum(notable == TRUE, na.rm = TRUE),
    collaboration = length(unique(unlist(unique_collaborate))),
    influence_creators = length(unique(unlist(unique_influence_creators))),
    collaboration_influence_creator = length(unique(c(unlist(unique_influence_creators),unlist( unique_collaborate)))),
    influence_music = length(unique(unlist(unique_influence_music)))
  )

# Step 12: Create Scoring Rubric
creator_rankings <- creator_stats %>%
  mutate(
    # Normalize each metric (0-1 scale)
    songs_score = (total_songs - min(total_songs)) / (max(total_songs) - min(total_songs)),
    notable_score = (notable_hits - min(notable_hits)) / (max(notable_hits) - min(notable_hits)),
    artists_score = (collaboration_influence_creator - min(collaboration_influence_creator)) / (max(collaboration_influence_creator) - min(collaboration_influence_creator)),
    music_score = (influence_music - min(influence_music)) / (max(influence_music) - min(influence_music)),
    
    # Calculate composite score (equal weighting)
    composite_score = songs_score + notable_score + artists_score + music_score
  ) %>%
  arrange(desc(composite_score)) %>%
  select(creator_name, total_songs, notable_hits, collaboration_influence_creator, influence_music, composite_score)

# Step 13: Final Ranked Table
creator_rankings %>%
  mutate(
    Rank = row_number(),
    `Star Factor` = round(composite_score, 2)
  ) %>%
  select(Rank, creator_name, total_songs, notable_hits, collaboration_influence_creator, 
         influence_music, `Star Factor`) %>%
  rename(
    `Artist` = creator_name,
    `Total Music` = total_songs,
    `Notable Hits` = notable_hits,
    `Artist Influ & Colab` = collaboration_influence_creator,
    `Music Influenced` = influence_music
  ) %>%
  kable(caption = "Artists Ranked by Star Factor") %>%
  kable_styling("striped", full_width = F) %>%
  scroll_box(height = "300px")
```

## 6.2 Question 3a) Visualize the careers of three artists. Compare and contrast their rise in popularity and influence?

Based on the results of the analysis above, the top artists in each category will be selected.

-   Greatest Number of Music Released: Sailor Shift
-   Most Popular Artist (Highest Number of Notable Hits): Jay Walters
-   Most Influential Artist (Influence Artists and Collaborations), Most Music Influence & Highest Star Factor: Min Fu

### 6.2.1 Visualizing the career of Sailor Shift

Sailor Shift has released the most number of music (Song/Album).

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

chosen_creator_1 = "Sailor Shift"

# Step 1: Get the node of the chosen creator
chosen_node_1 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1) %>%
  pull(creator_from) %>%
  unique()

# Step 2: Get the songs that the top creator produced
creator_songs_1 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1) %>%
  pull(song_to)

# Step 3: Get the songs they have influenced / artists they collaborate with
creators_songs_collaborate_influence_1 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1,
         infuence_music_collaborate != chosen_node_1) %>%
  pull(infuence_music_collaborate)

# Step 4: Get the songs they have influenced
creators_songs_influence_1 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1,
         infuence_music_collaborate != chosen_node_1,
         `Edge Colour` == "Influenced By") %>%
  pull(infuence_music_collaborate)

# Step 5: Get the influenced creators of the influenced songs
creators_songs_influence_creators_1 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1,
         influence_creator != chosen_node_1,
         !is.na(influence_creator),
         infuence_music_collaborate %in% creators_songs_influence_1) %>%
  pull(influence_creator)

all_nodes <- unique(c(chosen_node_1, 
                      creator_songs_1, 
                      creators_songs_collaborate_influence_1,
                      creators_songs_influence_creators_1))

# Create subgraph
sub_graph <- graph %>%
  filter(name %in% all_nodes)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name == chosen_creator_1, 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == chosen_creator_1, chosen_creator_1, NA)
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

:::: panel-tabset
## Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of music by release date
music_by_date_1 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_1)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = music_by_date_1,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Notable Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of notable music by release date
notable_music_by_date_1 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_1), notable == TRUE) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = notable_music_by_date_1,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Notable Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Notable Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Artist Influ & Colab

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced artists by release date
influence_artists_by_date_1 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_from %in% unique(chosen_node_1),
         influence_creator != unique(chosen_node_1)) %>%
  # Get unique artist-date pairs first
  distinct(influence_creator, influence_release_date) %>%
  # Find first influence date for each artist
  group_by(influence_creator) %>%
  summarize(
    first_influence_date = if(n() > 0) min(influence_release_date) else NA_real_,
    .groups = "drop"
  ) %>%
  # Count new artists by first influence date
  count(first_influence_date, name = "music_count") %>%
  arrange(first_influence_date) %>%
  rename(creator_release_date = first_influence_date) %>%
  # Calculate cumulative unique artists
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_artists_by_date_1,
  x = ~creator_release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Artists",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", creator_release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Annual Count of New Artist Influences & Collaborations",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Influenced Music

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced music by release date
influence_song_by_date_1 <- mc1_nodes_clean %>%
  filter(name %in% unique(creators_songs_influence_1)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_song_by_date_1,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Music",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Influence",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

::: callout-warning
## Note

Sailor Shift has no influence on Music creation
:::
::::

### 6.2.2 Visualizing the career of Jay Walters

Jay Walters has the highest number of notable hits.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

chosen_creator_2 = "Jay Walters"

# Step 1: Get the node of the chosen creator
chosen_node_2 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_2) %>%
  pull(creator_from) %>%
  unique()

# Step 2: Get the songs that the top creator produced
creator_songs_2 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_2) %>%
  pull(song_to)

# Step 3: Get the songs they have influenced / artists they collaborate with
creators_songs_collaborate_influence_2 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_2) %>%
  pull(infuence_music_collaborate)

# Step 4: Get the songs they have influenced
creators_songs_influence_2 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_2,
         `Edge Colour` == "Influenced By") %>%
  pull(infuence_music_collaborate)

# Step 5: Get the influenced creators of the influenced songs
creators_songs_influence_creators_2 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_2,
         influence_creator != chosen_node_1,
         !is.na(influence_creator),
         infuence_music_collaborate %in% creators_songs_influence_2) %>%
  pull(influence_creator)

all_nodes <- unique(c(chosen_node_2, 
                      creator_songs_2, 
                      creators_songs_collaborate_influence_2,
                      creators_songs_influence_creators_2))

# Create subgraph
sub_graph <- graph %>%
  filter(name %in% all_nodes)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name == chosen_creator_2, 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == chosen_creator_2, chosen_creator_2, NA)
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: panel-tabset
## Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of music by release date
music_by_date_2 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_2)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = music_by_date_2,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Notable Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of notable music by release date
notable_music_by_date_2 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_2), notable == TRUE) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = notable_music_by_date_2,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Notable Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Notable Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Artist Influ & Colab

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced artists by release date
influence_artists_by_date_2 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_from %in% unique(chosen_node_2),
         influence_creator != unique(chosen_node_2)) %>%
  # Get unique artist-date pairs first
  distinct(influence_creator, influence_release_date) %>%
  # Find first influence date for each artist
  group_by(influence_creator) %>%
  summarize(
    first_influence_date = if(n() > 0) min(influence_release_date) else NA_real_,
    .groups = "drop"
  ) %>%
  # Count new artists by first influence date
  count(first_influence_date, name = "music_count") %>%
  arrange(first_influence_date) %>%
  rename(creator_release_date = first_influence_date) %>%
  # Calculate cumulative unique artists
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_artists_by_date_2,
  x = ~creator_release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Artists",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", creator_release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Annual Count of New Artist Influences & Collaborations",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Influenced Music

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced music by release date
influence_song_by_date_2 <- mc1_nodes_clean %>%
  filter(name %in% unique(creators_songs_influence_2)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_song_by_date_2,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Music",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Influence",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```
:::

### 6.2.3 Visualizing the career of Min Fu

Min Fu is the most influential artist.

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

chosen_creator_3 = "Min Fu"

# Step 1: Get the node of the chosen creator
chosen_node_3 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_3) %>%
  pull(creator_from) %>%
  unique()

# Step 2: Get the songs that the top creator produced
creator_songs_3 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_3) %>%
  pull(song_to)

# Step 3: Get the songs they have influenced / artists they collaborate with
creators_songs_collaborate_influence_3 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_3,
         infuence_music_collaborate != chosen_node_3) %>%
  pull(infuence_music_collaborate)

# Step 4: Get the songs they have influenced
creators_songs_influence_3 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_3,
         infuence_music_collaborate != chosen_node_3,
         `Edge Colour` == "Influenced By") %>%
  pull(infuence_music_collaborate)

# Step 5: Get the influenced creators of the influenced songs
creators_songs_influence_creators_3 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_3,
         influence_creator != chosen_node_3,
         !is.na(influence_creator),
         infuence_music_collaborate %in% creators_songs_influence_3) %>%
  pull(influence_creator)

all_nodes <- unique(c(chosen_node_3, 
                      creator_songs_3, 
                      creators_songs_collaborate_influence_3,
                      creators_songs_influence_creators_3))

# Create subgraph
sub_graph <- graph %>%
  filter(name %in% all_nodes)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name == chosen_creator_3, 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == chosen_creator_3, chosen_creator_3, NA)
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: panel-tabset
## Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of music by release date
music_by_date_3 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_3)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = music_by_date_3,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Notable Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of notable music by release date
notable_music_by_date_3 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_3), notable == TRUE) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = notable_music_by_date_3,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Notable Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Notable Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Artist Influ & Colab

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced artists by release date
influence_artists_by_date_3 <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_from %in% unique(chosen_node_3),
         influence_creator != unique(chosen_node_3)) %>%
  # Get unique artist-date pairs first
  distinct(influence_creator, influence_release_date) %>%
  # Find first influence date for each artist
  group_by(influence_creator) %>%
  summarize(
    first_influence_date = if(n() > 0) min(influence_release_date) else NA_real_,
    .groups = "drop"
  ) %>%
  # Count new artists by first influence date
  count(first_influence_date, name = "music_count") %>%
  arrange(first_influence_date) %>%
  rename(creator_release_date = first_influence_date) %>%
  # Calculate cumulative unique artists
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_artists_by_date_3,
  x = ~creator_release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Artists",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", creator_release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Annual Count of New Artist Influences & Collaborations",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Influenced Music

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced music by release date
influence_song_by_date_3 <- mc1_nodes_clean %>%
  filter(name %in% unique(creators_songs_influence_3)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_song_by_date_3,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Music",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Influence",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```
:::

### 6.2.4 Compare and contrast the three artists' rise in popularity and influence

The cumulative graphs of the 3 artists (Sailor Shift, Jay Walters and Min Fu) will be overlaid for comparison of their musical careers.

::::: panel-tabset
## Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Visualisation

plot_ly(
  data = music_by_date_1,
  x = ~release_date,
  y = ~cumulative_count,
  type = "scatter",
  mode = "lines+markers",
  name = chosen_creator_1,
  line = list(color = "#2E3192", width = 2),
  marker = list(color = "red", size = 6),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Artist: ", chosen_creator_1,
    "<br>Influence Date: ", release_date,
    "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = music_by_date_2,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_2,
    line = list(color = "green", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_2,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = music_by_date_3,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_3,
    line = list(color = "purple", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_3,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Notable Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Visualisation

plot_ly(
  data = notable_music_by_date_1,
  x = ~release_date,
  y = ~cumulative_count,
  type = "scatter",
  mode = "lines+markers",
  name = chosen_creator_1,
  line = list(color = "#2E3192", width = 2),
  marker = list(color = "red", size = 6),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Artist: ", chosen_creator_1,
    "<br>Influence Date: ", release_date,
    "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = notable_music_by_date_2,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_2,
    line = list(color = "green", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_2,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = notable_music_by_date_3,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_3,
    line = list(color = "purple", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_3,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Notable Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Artist Influ & Colab

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Visualisation

plot_ly(
  data = influence_artists_by_date_1,
  x = ~creator_release_date,
  y = ~cumulative_count,
  type = "scatter",
  mode = "lines+markers",
  name = chosen_creator_1,
  line = list(color = "#2E3192", width = 2),
  marker = list(color = "red", size = 6),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Artist: ", chosen_creator_1,
    "<br>Influence Date: ", creator_release_date,
    "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = influence_artists_by_date_2,
    x = ~creator_release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_2,
    line = list(color = "green", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_2,
      "<br>Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = influence_artists_by_date_3,
    x = ~creator_release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_3,
    line = list(color = "purple", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_3,
      "<br>Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Annual Count of New Artist Influences & Collaborations",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

::: callout-warning
## Note

Sailor Shift has only Collaborations and no Artist Influence
:::

## Influenced Music

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Visualisation

plot_ly(
  data = influence_song_by_date_1,
  x = ~release_date,
  y = ~cumulative_count,
  type = "scatter",
  mode = "lines+markers",
  name = chosen_creator_1,
  line = list(color = "#2E3192", width = 2),
  marker = list(color = "red", size = 6),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Artist: ", chosen_creator_1,
    "<br>Influence Date: ", release_date,
    "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = influence_song_by_date_2,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_2,
    line = list(color = "green", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_2,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = influence_song_by_date_3,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_3,
    line = list(color = "purple", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_3,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Influence",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

::: callout-warning
## Note

Sailor Shift has no influence on music creation
:::
:::::

::: callout-tip
## Visualize the careers of three artists. Compare and contrast their rise in popularity and influence?

-   Among the three artists, Sailor Shift is the most recent entrant to the music industry, having debuted in 2024.
    -   She maintained consistent music releases through 2040.
    -   With 38 total releases, she surpassed Jay Walters' record (37 releases) in 2040, establishing herself as the most prolific artist.
    -   Min Fu has 12 records.
-   While Sailor Shift has released more music than Jay Walters, Jay Walters is the most popular Artist having released 35 hits that made the top record chart.
    -   Sailor Shift has 25 hits while Min Fu has 12.
-   Min Fu is the most influential artist having influenced/collaborated with 598 artists and influenced the creation of 192 music.
    -   Jay Walters has a much lower influence having influence/collaborated with 51 artists and 50 music.
    -   Sailor Shift has a similar influence of 48 artists (all collaborations) but 0 influence on the music scene.
-   However, Sailor Shift has the most recent influence, with new artist connections as recent as 2040.
    -   In contrast, Jay Walters' influence period ended earlier (last connection in 2035), while Min Fu's influence dates back to 2030.
:::

## 6.3 Question 3b) Using this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years.

This will be a continuation of Question 3a where only Oceanus Folk artists and the Oceanus Folk songs that they have produced are analysed.

### 6.3.1 Analysing the careers of all Oceanus Folk Artists

In order to predict the next Oceanus Folk stars, a grading rubric will be used where their ranking in these 4 categories (Number of Music released, Number of Notable Music, Number of New Artists Influenced / Collaborated With and Number of Music influenced). Each category will be given equal weighting with a maximum score of 4 and the Oceanus Folk artists will be ranked using this rubric.

```{r}
#| code-fold: true
#| code-summary: "Show Code"



genre_creators = creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(song_genre == chosen_genre) %>%
  pull(creator_from)

# Step 1: Filter to only Oceanus Folk Artists
oceanus_creator_and_songs_and_influences_and_creators_collaborate <- creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_from %in% genre_creators, song_genre == chosen_genre)

# Step 2: To highlight songs that the creator influence that is not produced by same creator
oceanus_creator_influence_lists <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  group_by(creator_name, creator_node_type, song_to, song_name, creator_release_date, song_genre, notable) %>%
  distinct () %>%
  summarize(
    unique_collaborate = list(unique(na.omit(infuence_music_collaborate[creator_from != influence_creator & `Edge Colour` == "Creator Of"]))),
    unique_influence_creators = list(unique(na.omit(influence_creator[creator_from != influence_creator & `Edge Colour` == "Influenced By"]))),
    unique_influence_music = list(unique(na.omit(infuence_music_collaborate[creator_from != influence_creator & !is.na(influence_genre)])))
  )

# Step 3: Aggregate unique influences per creator
oceanus_creator_stats <- oceanus_creator_influence_lists %>%
  group_by(creator_name) %>%
  summarize(
    total_songs = n_distinct(song_to),
    notable_hits = sum(notable == TRUE, na.rm = TRUE),
    collaboration = length(unique(unlist(unique_collaborate))),
    influence_creators = length(unique(unlist(unique_influence_creators))),
    collaboration_influence_creator = length(unique(c(unlist(unique_influence_creators),unlist( unique_collaborate)))),
    influence_music = length(unique(unlist(unique_influence_music)))
  )

# Step 4: Create Scoring Rubric
oceanus_creator_rankings <- oceanus_creator_stats %>%
  mutate(
    # Normalize each metric (0-1 scale)
    songs_score = (total_songs - min(total_songs)) / (max(total_songs) - min(total_songs)),
    notable_score = (notable_hits - min(notable_hits)) / (max(notable_hits) - min(notable_hits)),
    artists_score = (collaboration_influence_creator - min(collaboration_influence_creator)) / (max(collaboration_influence_creator) - min(collaboration_influence_creator)),
    music_score = (influence_music - min(influence_music)) / (max(influence_music) - min(influence_music)),
    
    # Calculate composite score (equal weighting)
    composite_score = songs_score + notable_score + artists_score + music_score
  ) %>%
  arrange(desc(composite_score)) %>%
  select(creator_name, total_songs, notable_hits, collaboration_influence_creator, influence_music, 
         composite_score)

# Final Ranked Table
oceanus_creator_rankings %>%
  mutate(
    Rank = row_number(),
    `Star Factor` = round(composite_score, 3)
  ) %>%
  select(Rank, creator_name, total_songs, notable_hits, collaboration_influence_creator, 
         influence_music, `Star Factor`) %>%
  rename(
    `Artist` = creator_name,
    `Total Music` = total_songs,
    `Notable Hits` = notable_hits,
    `Artist Influ & Colab` = collaboration_influence_creator,
    `Music Influenced` = influence_music
  ) %>%
  kable(caption = "Oceanus Folk Artists Ranked by Star Factor") %>%
  kable_styling("striped", full_width = F) %>%
  scroll_box(height = "300px")
```

### 6.3.2 Visualizing the career of Sailor Shift

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

chosen_creator_1 = "Sailor Shift"

# Step 1: Get the node of the chosen creator
chosen_node_1 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1) %>%
  pull(creator_from) %>%
  unique()

# Step 2: Get the songs that the top creator produced
creator_songs_1 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1) %>%
  pull(song_to)

# Step 3: Get the songs they have influenced / artists they collaborate with
creators_songs_collaborate_influence_1 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1,
         infuence_music_collaborate != chosen_node_1) %>%
  pull(infuence_music_collaborate)

# Step 4: Get the songs they have influenced
creators_songs_influence_1 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1,
         infuence_music_collaborate != chosen_node_1,
         `Edge Colour` == "Influenced By") %>%
  pull(infuence_music_collaborate)

# Step 5: Get the influenced creators of the influenced songs
creators_songs_influence_creators_1 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_1,
         influence_creator != chosen_node_1,
         !is.na(influence_creator),
         infuence_music_collaborate %in% creators_songs_influence_1) %>%
  pull(influence_creator)

all_nodes <- unique(c(chosen_node_1, 
                      creator_songs_1, 
                      creators_songs_collaborate_influence_1,
                      creators_songs_influence_creators_1))

# Create subgraph
sub_graph <- graph %>%
  filter(name %in% all_nodes)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name == chosen_creator_1, 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == chosen_creator_1, chosen_creator_1, NA)
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: panel-tabset
## Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of music by release date
music_by_date_1 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_1)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = music_by_date_1,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Notable Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of notable music by release date
notable_music_by_date_1 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_1), notable == TRUE) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = notable_music_by_date_1,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Notable Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Notable Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Artist Influ & Colab

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced artists by release date
influence_artists_by_date_1 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_from %in% unique(chosen_node_1),
         influence_creator != unique(chosen_node_1)) %>%
  # Get unique artist-date pairs first
  distinct(influence_creator, influence_release_date) %>%
  # Find first influence date for each artist
  group_by(influence_creator) %>%
  summarize(
    first_influence_date = if(n() > 0) min(influence_release_date) else NA_real_,
    .groups = "drop"
  ) %>%
  # Count new artists by first influence date
  count(first_influence_date, name = "music_count") %>%
  arrange(first_influence_date) %>%
  rename(creator_release_date = first_influence_date) %>%
  # Calculate cumulative unique artists
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_artists_by_date_1,
  x = ~creator_release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Artists",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", creator_release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Annual Count of New Artist Influences & Collaborations",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Influenced Music

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced music by release date
influence_song_by_date_1 <- mc1_nodes_clean %>%
  filter(name %in% unique(creators_songs_influence_1)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_song_by_date_1,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Music",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Influence",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```
:::

### 6.3.3 Visualizing the career of Chao Wu

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

chosen_creator_2 = "Chao Wu"

# Step 1: Get the node of the chosen creator
chosen_node_2 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_2) %>%
  pull(creator_from) %>%
  unique()

# Step 2: Get the songs that the top creator produced
creator_songs_2 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_2) %>%
  pull(song_to)

# Step 3: Get the songs they have influenced / artists they collaborate with
creators_songs_collaborate_influence_2 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_2,
         infuence_music_collaborate != chosen_node_2) %>%
  pull(infuence_music_collaborate)

# Step 4: Get the songs they have influenced
creators_songs_influence_2 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_2,
         infuence_music_collaborate != chosen_node_2,
         `Edge Colour` == "Influenced By") %>%
  pull(infuence_music_collaborate)

# Step 5: Get the influenced creators of the influenced songs
creators_songs_influence_creators_2 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_2,
         influence_creator != chosen_node_2,
         !is.na(influence_creator),
         infuence_music_collaborate %in% creators_songs_influence_2) %>%
  pull(influence_creator)

all_nodes <- unique(c(chosen_node_2, 
                      creator_songs_2, 
                      creators_songs_collaborate_influence_2,
                      creators_songs_influence_creators_2))

# Create subgraph
sub_graph <- graph %>%
  filter(name %in% all_nodes)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name == chosen_creator_2, 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == chosen_creator_2, chosen_creator_2, NA)
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: panel-tabset
## Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of music by release date
music_by_date_2 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_2)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = music_by_date_2,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Notable Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of notable music by release date
notable_music_by_date_2 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_2), notable == TRUE) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = notable_music_by_date_2,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Notable Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Notable Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Artist Influ & Colab

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced artists by release date
influence_artists_by_date_2 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_from %in% unique(chosen_node_2),
         influence_creator != unique(chosen_node_2)) %>%
  # Get unique artist-date pairs first
  distinct(influence_creator, influence_release_date) %>%
  # Find first influence date for each artist
  group_by(influence_creator) %>%
  summarize(
    first_influence_date = if(n() > 0) min(influence_release_date) else NA_real_,
    .groups = "drop"
  ) %>%
  # Count new artists by first influence date
  count(first_influence_date, name = "music_count") %>%
  arrange(first_influence_date) %>%
  rename(creator_release_date = first_influence_date) %>%
  # Calculate cumulative unique artists
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_artists_by_date_2,
  x = ~creator_release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Artists",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", creator_release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Annual Count of New Artist Influences & Collaborations",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Influenced Music

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced music by release date
influence_song_by_date_2 <- mc1_nodes_clean %>%
  filter(name %in% unique(creators_songs_influence_2)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_song_by_date_2,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Music",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Influence",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```
:::

### 6.3.4 Visualizing the career of Xia Jia

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

chosen_creator_3 = "Xia Jia"

# Step 1: Get the node of the chosen creator
chosen_node_3 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_3) %>%
  pull(creator_from) %>%
  unique()

# Step 2: Get the songs that the top creator produced
creator_songs_3 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_3) %>%
  pull(song_to)

# Step 3: Get the songs they have influenced / artists they collaborate with
creators_songs_collaborate_influence_3 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_3,
         infuence_music_collaborate != chosen_node_3) %>%
  pull(infuence_music_collaborate)

# Step 4: Get the songs they have influenced
creators_songs_influence_3 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_3,
         infuence_music_collaborate != chosen_node_3,
         `Edge Colour` == "Influenced By") %>%
  pull(infuence_music_collaborate)

# Step 5: Get the influenced creators of the influenced songs
creators_songs_influence_creators_3 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_3,
         influence_creator != chosen_node_3,
         !is.na(influence_creator),
         infuence_music_collaborate %in% creators_songs_influence_3) %>%
  pull(influence_creator)

all_nodes <- unique(c(chosen_node_3, 
                      creator_songs_3, 
                      creators_songs_collaborate_influence_3,
                      creators_songs_influence_creators_3))

# Create subgraph
sub_graph <- graph %>%
  filter(name %in% all_nodes)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name == chosen_creator_3, 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == chosen_creator_3, chosen_creator_3, NA)
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: panel-tabset
## Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of music by release date
music_by_date_3 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_3)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = music_by_date_3,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Notable Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of notable music by release date
notable_music_by_date_3 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_3), notable == TRUE) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = notable_music_by_date_3,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Notable Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Notable Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Artist Influ & Colab

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced artists by release date
influence_artists_by_date_3 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_from %in% unique(chosen_node_3),
         influence_creator != unique(chosen_node_3)) %>%
  # Get unique artist-date pairs first
  distinct(influence_creator, influence_release_date) %>%
  # Find first influence date for each artist
  group_by(influence_creator) %>%
  summarize(
    first_influence_date = if(n() > 0) min(influence_release_date) else NA_real_,
    .groups = "drop"
  ) %>%
  # Count new artists by first influence date
  count(first_influence_date, name = "music_count") %>%
  arrange(first_influence_date) %>%
  rename(creator_release_date = first_influence_date) %>%
  # Calculate cumulative unique artists
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_artists_by_date_3,
  x = ~creator_release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Artists",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", creator_release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Annual Count of New Artist Influences & Collaborations",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Influenced Music

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced music by release date
influence_song_by_date_3 <- mc1_nodes_clean %>%
  filter(name %in% unique(creators_songs_influence_3)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_song_by_date_3,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Music",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Influence",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```
:::

### 6.3.5 Visualizing the career of Donna Caldwell

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

chosen_creator_4 = "Donna Caldwell"

# Step 1: Get the node of the chosen creator
chosen_node_4 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_4) %>%
  pull(creator_from) %>%
  unique()

# Step 2: Get the songs that the top creator produced
creator_songs_4 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_4) %>%
  pull(song_to)

# Step 3: Get the songs they have influenced / artists they collaborate with
creators_songs_collaborate_influence_4 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_4,
         infuence_music_collaborate != chosen_node_4) %>%
  pull(infuence_music_collaborate)

# Step 4: Get the songs they have influenced
creators_songs_influence_4 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_4,
         infuence_music_collaborate != chosen_node_4,
         `Edge Colour` == "Influenced By") %>%
  pull(infuence_music_collaborate)

# Step 5: Get the influenced creators of the influenced songs
creators_songs_influence_creators_4 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_4,
         influence_creator != chosen_node_4,
         !is.na(influence_creator),
         infuence_music_collaborate %in% creators_songs_influence_4) %>%
  pull(influence_creator)

all_nodes <- unique(c(chosen_node_4, 
                      creator_songs_4, 
                      creators_songs_collaborate_influence_4,
                      creators_songs_influence_creators_4))

# Create subgraph
sub_graph <- graph %>%
  filter(name %in% all_nodes)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name == chosen_creator_4, 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == chosen_creator_4, chosen_creator_4, NA)
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: panel-tabset
## Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of music by release date
music_by_date_4 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_4)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = music_by_date_4,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Notable Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of notable music by release date
notable_music_by_date_4 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_4), notable == TRUE) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = notable_music_by_date_4,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Notable Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Notable Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Artist Influ & Colab

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced artists by release date
influence_artists_by_date_4 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_from %in% unique(chosen_node_4),
         influence_creator != unique(chosen_node_4)) %>%
  # Get unique artist-date pairs first
  distinct(influence_creator, influence_release_date) %>%
  # Find first influence date for each artist
  group_by(influence_creator) %>%
  summarize(
    first_influence_date = if(n() > 0) min(influence_release_date) else NA_real_,
    .groups = "drop"
  ) %>%
  # Count new artists by first influence date
  count(first_influence_date, name = "music_count") %>%
  arrange(first_influence_date) %>%
  rename(creator_release_date = first_influence_date) %>%
  # Calculate cumulative unique artists
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_artists_by_date_4,
  x = ~creator_release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Artists",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", creator_release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Annual Count of New Artist Influences & Collaborations",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Influenced Music

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced music by release date
influence_song_by_date_4 <- mc1_nodes_clean %>%
  filter(name %in% unique(creators_songs_influence_4)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_song_by_date_4,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Music",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Influence",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```
:::

### 6.3.6 Visualizing the career of Xiulan Ye

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

chosen_creator_5 = "Xiulan Ye"

# Step 1: Get the node of the chosen creator
chosen_node_5 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_5) %>%
  pull(creator_from) %>%
  unique()

# Step 2: Get the songs that the top creator produced
creator_songs_5 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_5) %>%
  pull(song_to)

# Step 3: Get the songs they have influenced / artists they collaborate with
creators_songs_collaborate_influence_5 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_5,
         infuence_music_collaborate != chosen_node_5) %>%
  pull(infuence_music_collaborate)

# Step 4: Get the songs they have influenced
creators_songs_influence_5 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_5,
         infuence_music_collaborate != chosen_node_5,
         `Edge Colour` == "Influenced By") %>%
  pull(infuence_music_collaborate)

# Step 5: Get the influenced creators of the influenced songs
creators_songs_influence_creators_5 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_name == chosen_creator_5,
         influence_creator != chosen_node_5,
         !is.na(influence_creator),
         infuence_music_collaborate %in% creators_songs_influence_5) %>%
  pull(influence_creator)

all_nodes <- unique(c(chosen_node_5, 
                      creator_songs_5, 
                      creators_songs_collaborate_influence_5,
                      creators_songs_influence_creators_5))

# Create subgraph
sub_graph <- graph %>%
  filter(name %in% all_nodes)



# Visualisation

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(node_name == chosen_creator_5, 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(node_name == chosen_creator_5, chosen_creator_5, NA)
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: panel-tabset
## Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of music by release date
music_by_date_5 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_5)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = music_by_date_5,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Notable Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of notable music by release date
notable_music_by_date_5 <- mc1_nodes_clean %>%
  filter(name %in% unique(creator_songs_5), notable == TRUE) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = notable_music_by_date_5,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Notable Music Releases",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Released Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Released Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Notable Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Artist Influ & Colab

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced artists by release date
influence_artists_by_date_5 <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_from %in% unique(chosen_node_5),
         influence_creator != unique(chosen_node_5)) %>%
  # Get unique artist-date pairs first
  distinct(influence_creator, influence_release_date) %>%
  # Find first influence date for each artist
  group_by(influence_creator) %>%
  summarize(
    first_influence_date = if(n() > 0) min(influence_release_date) else NA_real_,
    .groups = "drop"
  ) %>%
  # Count new artists by first influence date
  count(first_influence_date, name = "music_count") %>%
  arrange(first_influence_date) %>%
  rename(creator_release_date = first_influence_date) %>%
  # Calculate cumulative unique artists
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_artists_by_date_5,
  x = ~creator_release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Artists",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", creator_release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Annual Count of New Artist Influences & Collaborations",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```

## Influenced Music

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Count number of influenced music by release date
influence_song_by_date_5 <- mc1_nodes_clean %>%
  filter(name %in% unique(creators_songs_influence_5)) %>%
  count(release_date, name = "music_count") %>%
  arrange(release_date) %>%  # Ensure dates are in chronological order
  mutate(cumulative_count = cumsum(music_count))



# Visualisation

plot_ly(
  data = influence_song_by_date_5,
  x = ~release_date,
  y = ~music_count,
  type = "bar",
  name = "Number of Influenced Music",
  marker = list(color = "#2E3192"),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Influence Date: ", release_date,
    "<br>Count: ", music_count
    )
  ) %>%
  add_trace(
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Cumulative Count",
    line = list(color = "black", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Influence",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    )
  )
```
:::

### 6.3.7 Compare and contrast the five artists' rise in popularity and influence

The cumulative graphs of the 5 artists (Sailor Shift, Chao Wu, Xia Jia, Donna Caldwell, and Xiulan Ye) will be overlaid for comparison of their musical careers.

::::::: panel-tabset
## Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Visualisation

plot_ly(
  data = music_by_date_1,
  x = ~release_date,
  y = ~cumulative_count,
  type = "scatter",
  mode = "lines+markers",
  name = chosen_creator_1,
  line = list(color = "#2E3192", width = 2),
  marker = list(color = "red", size = 6),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Artist: ", chosen_creator_1,
    "<br>Influence Date: ", release_date,
    "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = music_by_date_2,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_2,
    line = list(color = "green", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_2,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = music_by_date_3,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_3,
    line = list(color = "purple", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_3,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
    add_trace(
    data = music_by_date_4,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_4,
    line = list(color = "orange", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_4,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
    add_trace(
    data = music_by_date_5,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_5,
    line = list(color = "skyblue", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_5,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    ),
    annotations = list(
      list(
        x = 2017, 
        y = 2,
        text = "<b>2017:<br>Donna Caldwell <br>& Xiulan Ye</b>",
        xref = "x", yref = "y",
        xanchor = "right",
        showarrow = TRUE, arrowhead = 2,
        ax = -30, ay = -15,
        font = list(color="black", size=12)
      )
    )
  )
```

::: callout-warning
## Note

Donna Caldwell and Xiulan Ye are at 2017 with a count of 2.
:::

## Notable Music Releases

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Visualisation

plot_ly(
  data = notable_music_by_date_1,
  x = ~release_date,
  y = ~cumulative_count,
  type = "scatter",
  mode = "lines+markers",
  name = chosen_creator_1,
  line = list(color = "#2E3192", width = 2),
  marker = list(color = "red", size = 6),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Artist: ", chosen_creator_1,
    "<br>Influence Date: ", release_date,
    "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = notable_music_by_date_2,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_2,
    line = list(color = "green", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_2,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = notable_music_by_date_3,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_3,
    line = list(color = "purple", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_3,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
    add_trace(
    data = notable_music_by_date_4,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_4,
    line = list(color = "orange", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_4,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
    add_trace(
    data = notable_music_by_date_5,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_5,
    line = list(color = "skyblue", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_5,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Notable Music (Song/Album) Releases",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    ),
    annotations = list(
      list(
        x = 2017, 
        y = 1,
        text = "<b>2017:<br>Donna Caldwell <br>& Xiulan Ye</b>",
        xref = "x", yref = "y",
        xanchor = "right",
        showarrow = TRUE, arrowhead = 2,
        ax = -30, ay = -15,
        font = list(color="black", size=12)
      )
    )
  )
```

::: callout-warning
## Note

Donna Caldwell and Xiulan Ye are at 2017 with a count of 1.
:::

## Artist Influ & Colab

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Visualisation

plot_ly(
  data = influence_artists_by_date_1,
  x = ~creator_release_date,
  y = ~cumulative_count,
  type = "scatter",
  mode = "lines+markers",
  name = chosen_creator_1,
  line = list(color = "#2E3192", width = 2),
  marker = list(color = "red", size = 6),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Artist: ", chosen_creator_1,
    "<br>Influence Date: ", creator_release_date,
    "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = influence_artists_by_date_2,
    x = ~creator_release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_2,
    line = list(color = "green", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_2,
      "<br>Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = influence_artists_by_date_3,
    x = ~creator_release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_3,
    line = list(color = "purple", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_3,
      "<br>Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
    add_trace(
    data = influence_artists_by_date_4,
    x = ~creator_release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_4,
    line = list(color = "orange", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_4,
      "<br>Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
    add_trace(
    data = influence_artists_by_date_5,
    x = ~creator_release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_5,
    line = list(color = "skyblue", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_5,
      "<br>Influence Date: ", creator_release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Annual Count of New Artist Influences & Collaborations",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    ),
    annotations = list(
      list(
        x = 2029, 
        y = 159,
        text = "<b>Donna Caldwell</b>",
        xref = "x", yref = "y",
        xanchor = "left",
        showarrow = TRUE, arrowhead = 2,
        ax = 30, ay = 30,
        font = list(color="black", size=12)
      )
    )
  )
```

::: callout-warning
## Note

Donna Caldwell overlaps with Xiulan Ye
:::

## Influenced Music

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Visualisation

plot_ly(
  data = influence_song_by_date_1,
  x = ~release_date,
  y = ~cumulative_count,
  type = "scatter",
  mode = "lines+markers",
  name = chosen_creator_1,
  line = list(color = "#2E3192", width = 2),
  marker = list(color = "red", size = 6),
  hoverinfo = "text",
  hovertext = ~paste0(
    "Artist: ", chosen_creator_1,
    "<br>Influence Date: ", release_date,
    "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = influence_song_by_date_2,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_2,
    line = list(color = "green", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_2,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  add_trace(
    data = influence_song_by_date_3,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_3,
    line = list(color = "purple", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_3,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
    add_trace(
    data = influence_song_by_date_4,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_4,
    line = list(color = "orange", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_4,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
    add_trace(
    data = influence_song_by_date_5,
    x = ~release_date,
    y = ~cumulative_count,
    type = "scatter",
    mode = "lines+markers",
    name = chosen_creator_5,
    line = list(color = "skyblue", width = 2),
    marker = list(color = "red", size = 6),
    hoverinfo = "text",
    hovertext = ~paste0(
      "Artist: ", chosen_creator_5,
      "<br>Influence Date: ", release_date,
      "<br>Cumulative Count: ", cumulative_count
    )
  ) %>%
  layout(
    title = "Yearly Music (Song/Album) Influence",
    margin = list(b = 80, t = 80),      
    xaxis = list(
      title = NA,  
      dtick = 5,
      automargin = TRUE
    ),
    yaxis = list(
      title = "Count",
      automargin = TRUE
    ),
    legend = list(
      orientation = "h",
      x = 0.5,
      xanchor = "center",
      y = -0.1
    ),
    annotations = list(
      list(
        x = 2024, 
        y = 16,
        text = "<b>Donna Caldwell</b>",
        xref = "x", yref = "y",
        xanchor = "right",
        showarrow = TRUE, arrowhead = 2,
        ax = -30, ay = -20,
        font = list(color="black", size=12)
      )
    )
  )
```

::: callout-warning
## Note

-   Donna Caldwell overlaps with Xiulan Ye
-   Sailor Shift has no influence
:::
:::::::

### 6.3.8 Analysing the relationships between these five artists

```{r}
#| code-fold: true
#| code-summary: "Show Code"

# Data Preparation

# Step 1: Find outgoing edges from Chao Wu
out_edges_1 <- mc1_edges_clean %>%
  filter(from == unique(chosen_node_1))

# Step 2: Identify neighbour node names
out_node_names_1 <- out_edges_1$to



# Step 1: Find outgoing edges from Chao Wu
out_edges_2 <- mc1_edges_clean %>%
  filter(from == unique(chosen_node_2))

# Step 2: Identify neighbour node names
out_node_names_2 <- out_edges_2$to



# Step 1: Find outgoing edges from Chao Wu
out_edges_3 <- mc1_edges_clean %>%
  filter(from == unique(chosen_node_3))

# Step 2: Identify neighbour node names
out_node_names_3 <- out_edges_3$to



# Step 1: Find outgoing edges from Chao Wu
out_edges_4 <- mc1_edges_clean %>%
  filter(from == unique(chosen_node_4))

# Step 2: Identify neighbour node names
out_node_names_4 <- out_edges_4$to



# Step 1: Find outgoing edges from Chao Wu
out_edges_5 <- mc1_edges_clean %>%
  filter(from == unique(chosen_node_5))

# Step 2: Identify neighbour node names
out_node_names_5 <- out_edges_5$to



# Build subgraph using names
sub_nodes <- unique(c(chosen_node_1,
                      chosen_node_2,
                      chosen_node_3,
                      chosen_node_4,
                      chosen_node_5,
                      out_node_names_1,
                      out_node_names_2,
                      out_node_names_3,
                      out_node_names_4,
                      out_node_names_5))

sub_graph <- graph %>%
  activate(nodes) %>%
  filter(name %in% sub_nodes)

g <- sub_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_fan(
    aes(
      edge_colour = `Edge Colour`,
      start_cap = circle(1, 'mm'),
      end_cap = circle(1, 'mm')
      ),
    arrow = arrow(length = unit(1, 'mm')),
    alpha = 0.3
  ) +
  geom_point_interactive(
    aes(
      x = x,
      y = y,
      data_id = name,
      colour = `Node Colour`,
      shape = `Node Type`,
      size = ifelse(`node_name` %in% c(chosen_node_1, 
                                       chosen_node_2, 
                                       chosen_node_3, 
                                       chosen_node_4, 
                                       chosen_node_5), 3, 1),
      tooltip = case_when(
        `Node Type` == "Album" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)", node_name, genre, notable, release_date
        ),
        `Node Type` == "Song" ~ sprintf(
          "%s<br/>%s<br/>Notable: %s<br/>(%s)<br/>Single: %s", node_name, genre, notable, release_date, single
        ),
        TRUE ~ sprintf("%s", node_name)
      )
    ),
    show.legend = c(size = FALSE)
  )+ 
  geom_node_text(
    aes(
      label = ifelse(`node_name` == chosen_creator_1, chosen_creator_1,
              ifelse(`node_name` == chosen_creator_2, chosen_creator_2,
              ifelse(`node_name` == chosen_creator_3, chosen_creator_3,
              ifelse(`node_name` == chosen_creator_4, chosen_creator_4,
              ifelse(`node_name` == chosen_creator_5, chosen_creator_5, NA)))))
    ),
    fontface = "bold",
    size = 2.5,
    colour = 'red',
    show.legend = FALSE
  ) +
  scale_shape_manual(
    name = "Node Type",
    values = c(
      "Album" = 16,
      "MusicalGroup" = 15,
      "Person" = 17,
      "Song" = 10
    )
  ) +
  scale_edge_colour_manual(
    name = "Edge Colour",
    values = c(
      `Creator Of` = "#47D45A",
      `Influenced By` = "#FF5757",
      `Member Of` = "#CF57FF"
    )
  ) +
  scale_colour_manual(
    name = "Node Colour",
    values = c(
      "Musician" = "grey50",
      "Oceanus Folk" = "#0027EA",
      "Other Genre" = "#A45200"
    )
  ) +
  theme_graph() +
  theme(legend.text = element_text(size = 6),
        legend.title = element_text(size = 9)) +
  scale_size_identity()

girafe(ggobj = g, width_svg = 7, height_svg = 6)
```

::: callout-tip
-   All five artists are solo artists and none of them are part of the same musical group
-   Chao Wu, Xia Jia, Donna Caldwell and Xiulan Ye have some collaborative works with each other which can explain why some of their graphs overlaps.
    -   Chao Wu, Xia Jia, Donna Caldwell and Xiulan Ye produced Winds of the Basque Shore and Destiny's Call together.
:::

### 6.3.8 Predicting who the next three Oceanus Folk stars with be over the next five years

::: callout-tip
## Sailor Shift

-   Sailor Shift is ranked 1st in Oceanus Folk star factor.
    -   Per the VAST Challenge background, she is already one of music's biggest superstars and a dominant figure in the Oceanus Folk community.
    -   Therefore, she will not be included in these predictions, as she has already achieved superstar status.
-   This analysis will continue to identify the next 3 emerging artists poised to become the next Oceanus Folk stars.
:::

::: callout-tip
## Chao Wu

-   Chao Wu is the second on the Star Factor list and his influence is large having influenced/collaborated with 190 Artists and influenced the creation of 44 Music with his Oceanus Folk music.
    -   Furthermore, he gained his large following despite having only released 4 music.
    -   Among his 4 music,3 of them are hits.
    -   His last Oceanus Folk work was in 2025 but his work is still being referred to in 2038.
:::

::: callout-tip
## Xia Jia

-   Xia Jia is the next on the Star Factor list and her influence is equally large having influenced 178 Artists and 42 Music with her Oceanus Folk music.
    -   Furthermore, she has also gained this large following despite having only released 4 music.
    -   Similarly, 3 of them are hits.
    -   Her last Oceanus Folk work was in 2028 but her works were last referred to in 2030 which is less recent than Chao Wu.
:::

::: callout-tip
## Xiulan Ye

-   Both Xiulan Ye and Donna Caldwell have produced the 2 influential songs Basque Shore and Destiny's Call together.
-   Their last Oceanus Folk work was in 2017 and was last referred to in 2030.
-   However, Xiulan Ye is slightly more established in the music scene having also produced Unbound from the Doom Metal genre.
-   Therefore, the third predicted star will be Xiulan Ye but Donna Caldwell has very good potential as well.
:::

Prediction

In this part of our analysis, we set out to give three predictions of who the next Oceanus Folk stars with be over the next five years.

To do this, we designed a data-driven **Star Factor score**— a predictive measure using key metrics of an artist's popularity and influence that capture what it means to be a rising star in the Oceanus Folk music scene:

Total Music Releases: How many works (songs/albums) the artist has produced.

Notable Music Releases: How many of those works are considered hits or critically notable.

Influenced Music Works: The number of downstream works (songs/albums) influenced by this artist’s creations.

Influenced Artists: The number of distinct artists who were directly or indirectly influenced by this artist.

These metrics were computed for every Oceanus Folk artist in the dataset.

```{r}
library(purrr)

all_oceanus_creators <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  pull(creator_name) %>%
  unique()

compute_creator_metrics <- function(creator_name) {
  creator_node <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
    filter(creator_name == !!creator_name) %>%
    pull(creator_from) %>%
    unique()
  
  creator_songs <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
    filter(creator_name == !!creator_name) %>%
    pull(song_to) %>%
    unique()
  
  notable_count <- mc1_nodes_clean %>%
    filter(name %in% creator_songs, notable == TRUE) %>%
    nrow()
  
  influenced_music <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
    filter(creator_from %in% creator_node, `Edge Colour` == "Influenced By") %>%
    pull(infuence_music_collaborate) %>%
    unique() %>%
    length()
  
  influenced_artists <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
    filter(creator_from %in% creator_node, influence_creator != creator_node) %>%
    pull(influence_creator) %>%
    unique() %>%
    length()
  
  tibble(
    creator_name = creator_name,
    total_music = length(creator_songs),
    notable_music = notable_count,
    influenced_music = influenced_music,
    influenced_artists = influenced_artists
  )
}
```

# Normalize all 4 columns to 0–1 scale

```{r}
artist_metrics_df <- map_dfr(all_oceanus_creators, compute_creator_metrics)

artist_metrics_df <- artist_metrics_df %>%
  mutate(
    norm_total_music = (total_music - min(total_music)) / (max(total_music) - min(total_music)),
    norm_notable_music = (notable_music - min(notable_music)) / (max(notable_music) - min(notable_music)),
    norm_influenced_music = (influenced_music - min(influenced_music)) / (max(influenced_music) - min(influenced_music)),
    norm_influenced_artists = (influenced_artists - min(influenced_artists)) / (max(influenced_artists) - min(influenced_artists)),
    
    # Star Factor = Equal weighted average of all four metrics
    star_score = 0.25 * norm_total_music +
                 0.25 * norm_notable_music +
                 0.25 * norm_influenced_music +
                 0.25 * norm_influenced_artists
  )
```

------------------------------------------------------------------------

Filters the data to include only years 2030–2040.

Groups by artist and year.

For each (artist, year) combination, computes:

total_music: how many distinct songs they created that year. notable_music: how many were marked as notable. influenced_music: how many unique music works they influenced. influenced_artists: how many unique artists they influenced.

```{r}
# Step 1: Build yearly metrics for Oceanus Folk creators (2030–2040)
artist_yearly_metrics <- oceanus_creator_and_songs_and_influences_and_creators_collaborate %>%
  filter(creator_release_date >= 2030, creator_release_date <= 2040) %>%
  group_by(creator_name, creator_release_date) %>%
  summarise(
    total_music = n_distinct(song_to),
    notable_music = sum(notable == TRUE, na.rm = TRUE),
    influenced_music = n_distinct(infuence_music_collaborate[`Edge Colour` == "Influenced By"], na.rm = TRUE),
    influenced_artists = n_distinct(influence_creator[!is.na(influence_creator)], na.rm = TRUE),
    .groups = "drop"
  )
```

Compute the trend slope of each metric over time per artist

Fit a linear regression model for each metric across years (y \~ year). Extract the slope (rate of change per year).

For each artist:

It calculates the annual trend (i.e., slope) of each metric from 2030 to 2040. If an artist has no data for some years, NA is filled with 0.

```{r}
library(purrr)

compute_trend_slope <- function(df, metric) {
  if (nrow(df) < 2) return(NA)  # Not enough years of data
  model <- lm(reformulate("creator_release_date", metric), data = df)
  coef(model)[["creator_release_date"]]
}

# Compute slope of trend over time for each artist
trend_df <- artist_yearly_metrics %>%
  group_by(creator_name) %>%
  summarise(
    trend_music = compute_trend_slope(pick(everything()), "total_music"),
    trend_notable = compute_trend_slope(pick(everything()), "notable_music"),
    trend_influenced_music = compute_trend_slope(pick(everything()), "influenced_music"),
    trend_influenced_artists = compute_trend_slope(pick(everything()), "influenced_artists"),
    .groups = "drop"
  ) %>%
  replace_na(list(
    trend_music = 0,
    trend_notable = 0,
    trend_influenced_music = 0,
    trend_influenced_artists = 0
  ))
```

Joins the trend slopes to the base dataset artist_metrics_df, which already contains each artist’s cumulative star_score (as of 2040).

Calculates an average trend across the 4 metrics.

Projects the star score 5 years into the future (2045) using "predicted_star_score = star_score (in 2040) + 5 × average trend per year"

```{r}
# Merge current score (2040) with trend data
predicted_star_df <- artist_metrics_df %>%
  left_join(trend_df, by = "creator_name") %>%
  mutate(
    # Average slope of the 4 metrics
    trend_avg = (trend_music + trend_notable + trend_influenced_music + trend_influenced_artists) / 4,

    # Predict star score in 2045 assuming 5 years of continued trend
    predicted_star_score = star_score + 5 * trend_avg
  ) %>%
  arrange(desc(predicted_star_score))
```

```{r}
predicted_star_df %>%
  select(creator_name, star_score, trend_avg, predicted_star_score) %>%
  head(10) %>%
  kable(format = "html", digits = 2, caption = "Top 10 Predicted Oceanus Folk Stars in 2045") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE)
```
